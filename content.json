{"pages":[{"title":"About NullSKool","text":"Intro. HE11ow World!!안녕하세요 음악과 게임을 좋아하는 개발자입니다 🕹 저는 이런 것들을 추구하고 고민합니다.💻 최소한의 리소스로 정직하고 최대한의 효과 직관적인 코드 개발자 모두의 상향 평준화저는 이것을 좋아합니다. 🖥 데이터 분석/머신러닝에서의 파라미터 서치 성능 최적화(딥러닝 모델 A/B Test, 파이프라인 코드 최적화) 트러블 슈팅(딥러닝 모델의 loss NaN 현상 디버깅&amp;해결, 오버/언더피팅 유연하게 방지)저는 이것을 추구하고 열망합니다. 🖥 MLOps &amp; 효율적인 Custom Modeling AutoML 딥러닝 모델 학습 방향, 지표를 위한 Tensorflow/Pytorch Debugging저는 다음의 순서대로 지향합니다. 🖥 기술적 안정성 &gt; 기술부채 최소화 &gt; 일정 Contacts 📫 EMAIL : next.forr@gmail.com","link":"/about/index.html"}],"posts":[{"title":"Dacon후기","text":"저번에 이은 데이콘 도전 후기2 순위 발표 순간… ?!?!?!?! 1458 팀 중 15위… 와 이거 실화?! 모델링은 Conv-LSTM 전처리 방법은 설명력 높은 변수, 단위면적당 일사량 = 산란일사량 + 직접 일사량 GHI = DHI + DNI * \\(\\cos(\\theta))\\) 하루의 전체 시간 중에서 해가 뜨고 질 때까지만 계산하는 것이였다. 이것이 바로 그 방법들… 12345678910111213141516171819202122232425262728293031323334# GHI 계산 방법temp['NoSun'] = np.where((temp['DHI'] &gt; 0) | (temp['DNI'] &gt; 0), 0, 1) temp['sunny'] = temp.groupby(['Day', temp.NoSun.cumsum()])['NoSun'].apply(lambda x: (x ^ 1).cumsum())temp['long'] = temp['sunny'].cummax()temp['angle'] = ((temp['sunny'] / temp['long']) * 180) - 90temp['GHI'] = temp['DHI'] + temp['DNI'] * temp['angle'].apply(lambda x: np.cos(np.pi * (x / 180)))# DataSet windowing 하는 방법def windowed_dataset(x, y, window_size, batch_size, shuffle, shuffle_size): ds_x = tf.data.Dataset.from_tensor_slices(x) ds_x = ds_x.window(window_size, shift = 1, stride = 1, drop_remainder=True) ds_x = ds_x.flat_map(lambda x: x.batch(window_size)) ds_y = tf.data.Dataset.from_tensor_slices(y) ds_y = ds_y.window(window_size, shift = 1, stride = 1, drop_remainder=True) ds_y = ds_y.flat_map(lambda x: x.batch(window_size)) ds = tf.data.Dataset.zip((ds_x, ds_y)) if shuffle: ds = ds.shuffle(shuffle_size) return ds.batch(batch_size).prefetch(1)def window_data_pred(data, window_size, batch_size): ds = tf.data.Dataset.from_tensor_slices(data) ds = ds.window(window_size, shift = 1, stride = 1) #, drop_remainder=True) # stride = 1 ds = ds.flat_map(lambda x: x.batch(window_size)) return ds.padded_batch(batch_size, padded_shapes=(None, 7)).prefetch(1) # 7은 Test Set의 특징 개수 Test dataset을 drop_remainder=True 하면 안되는 이유? Test Set의 정보가 sequence length만큼 없어짐.","link":"/2021/01/30/Dacon%ED%9B%84%EA%B8%B0/"},{"title":"bbackcheem","text":"우분투 동적 라이브러리 빌드 후 안될때…(feat. CUDA) 예를 들어 ldd 의존성 체크에서 libc10.so 파일이 링크 확인할 때 1IFS=':' ; for i in $LD_LIBRARY_PATH; do ls -l $i/libc10.so 2&gt;/dev/null;done 여기에서 아무것도 리턴 안되면 링크가 안되어 있는 상태임. 해결책 export LD_LIBRARY_PATH = /somepath/bin:$LD_LIBRARY_PATH ld.so.conf.d/someconf.conf 셋팅","link":"/2022/04/05/bbackcheem/"},{"title":"firstpost1","text":"HEXO 블로그 설치와 사용법새 글 쓰는 법1$ hexo new [레이아웃이름] &quot;새 포스트이름&quot; 레이아웃 디폴트(바로 발행) : post 바로 발행되지 않는 글 : draft 1$ hexo publish &quot;새 포스트이름&quot; 으로 draft에서 publish 합니다. publish는 잘 쓰지 않는다 파일명 에러나기 때문. 그냥냅다 MarkDown으로 쓰고 hexo g -d로 해버림","link":"/2020/10/24/firstpost1/"},{"title":"GAN프로젝트_try","text":"Style GAN toy 프로젝트StyleGAN의 특징 이미지를 Style의 조합으로 보고Generator의 각 Layer마다 Style 정보를 입히는 방식으로 이미지 합성이 때 각 Layer에서 추가되는 Style은 이미지의 Coarse Feature(포즈, 성별 등)부터Fine Detail(머리색, 피부톤 등)까지각기 다른 Level의 Visual 속성들을 조절 가능StyleGAN은 생각보다 안정적이고 높은 퀄리티의 이미지 생성 네트워크 구조(Module) GAN이란 어떤 것일까??? Instance Norm? Generator 구조 설명 왼쪽이 Traditional Network, 오른쪽이 이 논문에서 제안한 Style-gased Generator. 왼쪽 네트워크와 오른쪽에 Synthesis Network가 똑같은 구조를 갖고 있지만,이전 GAN에서는 Latent z를 바로 Input으로 넣어줬던 것과는 다르게,StyleGAN에서는 학습된 Constant, (w) 값을 입력으로 사용함. 새롭게 Mapping Network와 Noise가 추가됨.. W를 Feature에 매핑하는 경우W는 Z처럼 고정된 분포를 따르지 않음. Sampling density는 학습된 Piecewise Continuous Mapping f(z)(f는 Mapping Network 입니다)에 의해 정해짐. 따라서, Warping(틀어짐)이 많이 일어나지 않음.그렇기 때문에 Factors of variation은 더욱 Linear하고, Disentangled (얽히지 않음).이것이 바로 z를 곧바로 Feature에 매핑하는 것보다 w에 매핑하는 것의 장점입니다 기존의 Generator (a)는Input Latent Vector (z)가 직접 Convolution, Upsampling 등을 거쳐 이미지로 변환되는 구조. Style-based Generator (b) 의 경우,(z)가 Fully-connected Layer로 구성된 Mapping Network을 거쳐Intermediate Latent Vector (w) 먼저 변환. (w)는 Constant Tensor가 이미지로 변환되는 과정에서스타일을 입히는 역할을 수행. 다양한 스타일의 이미지를 생성. Style Transfer를 실시간으로 가능케하는 Adaptive Instance Norm Synthesis Network (합성 네트워크)z를 중간 latent space W에 매핑을 한 뒤에 이 w는 “A”를 거쳐서 style, y=(ys,yb)로 변형됨. 이때 A는 학습된 affine transform 임. 그리고 이 style들은AdaIN(adaptive instance normalization) opeartion을 control 함. AdaIN은 style transfer를 할 때 많이 쓰이는 방법으로, 임의의 style transfer를 실시간으로 가능하게 함.여기서 feature map xi는normalized 된 다음에, style로 변환된 두 y로 scaled, biased 됨. (style이 입혀짐)이 과정을 매 layer 마다 반복함. 그리고 이러한 방법은 scale-specific control 을 가능하게 함.","link":"/2020/11/17/GAN%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-try/"},{"title":"Multi-GPU","text":"작곡 GAN x Multi-GPU작곡 GAN 만들어보기 음악 작곡 전처리 방법 : midi파일을 입출력으로 사용 pypianoroll로 각 트랙의 악기, 키, 코드, 화음 계산 반영 네트워크 구조 Generator input : Single Melody track (Timestep, n_pitch, n_tracks) Latent noise Vector z: (2, 8, 512) U-Net 구조로 되어있음. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384 def _conv2d(layer_input, filters, f_size=4, bn=True): # 다운샘플링 d = keras.layers.Conv2D(filters, kernel_size=f_size, strides=2, padding='same')(layer_input) d = keras.layers.LeakyReLU(alpha=0.2)(d) if bn: d = keras.layers.BatchNormalization(momentum=0.8)(d) return d def _deconv2d(layer_input, pre_input, filters, f_size=4, dropout_rate=0): # 업 샘플링 u = keras.layers.UpSampling2D(size=2)(layer_input) u = keras.layers.Conv2D(filters, kernel_size=f_size, strides=1, padding='same')(u) u = keras.layers.BatchNormalization(momentum=0.8)(u) u = keras.layers.ReLU()(u) if dropout_rate: u = keras.layers.Dropout(dropout_rate)(u) u = keras.layers.Concatenate()([u, pre_input]) return u def build_generator(condition_input_shape=(32, 128, 1), filters=64, instruments=4, latent_shape=(2, 8, 512)): # 제네레이터 블록 c_input = keras.layers.Input(shape=condition_input_shape) z_input = keras.layers.Input(shape=latent_shape) d1 = _conv2d(c_input, filters, bn=False) d2 = _conv2d(d1, filters * 2) d3 = _conv2d(d2, filters * 4) d4 = _conv2d(d3, filters * 8) d4 = keras.layers.Concatenate(axis=-1)([d4, z_input]) u4 = _deconv2d(d4, d3, filters * 4) u5 = _deconv2d(u4, d2, filters * 2) u6 = _deconv2d(u5, d1, filters) u7 = keras.layers.UpSampling2D(size=2)(u6) output = keras.layers.Conv2D(instruments, kernel_size=4, strides=1, padding='same', activation='tanh')(u7) # 32, 128, 4 generator = keras.models.Model([c_input, z_input], output, name='Generator') return generator ``` 2. Discriminator ![U-net](/2021/09/06/Multi-GPU/멀티지퓨_03.png) ```python def _build_discriminator_layer(layer_input, filters, f_size=4): # input: [batch_size, in_channels, H, W] # output: [batch_size, out_channels, H/2, W/2] d = keras.layers.Conv2D(filters, kernel_size=f_size, strides=2, padding='same')(layer_input) # Discriminator는 BatchNorm을 쓰지 않습니다!! d = keras.layers.LeakyReLU(alpha=0.2)(d) return d def build_discriminator(pianoroll_shape=(32, 128, 4), filters=64): # WGAN Discriminator(비평자) condition_input_shape = (32,128,1) groundtruth_pianoroll = keras.layers.Input(shape=pianoroll_shape) condition_input = keras.layers.Input(shape=condition_input_shape) combined_imgs = keras.layers.Concatenate(axis=-1)([groundtruth_pianoroll, condition_input]) d1 = _build_discriminator_layer(combined_imgs, filters) d2 = _build_discriminator_layer(d1, filters * 2) d3 = _build_discriminator_layer(d2, filters * 4) d4 = _build_discriminator_layer(d3, filters * 8) x = keras.layers.Flatten()(d4) logit = keras.layers.Dense(1)(x) discriminator = keras.models.Model([groundtruth_pianoroll,condition_input], logit, name='Discriminator') return discriminator GAN모델 loss함수와 굴리는 방법 Generator Loss 함수 : Discriminator loss함수와 반대의 함수를 사용한다. 제네레이터는 pianoroll을 가능한 한 더 리얼하게 만들어야 하기때문. $\\frac{1}{m} \\sum_{i=1}^{m} -D_w(G(z^{i}|c^{i})|c^{i})$ 12345def generator_loss(discriminator_fake_output):&quot;&quot;&quot; Wasserstein GAN loss(Generator) -D(G(z|c))&quot;&quot;&quot;return -tf.reduce_mean(discriminator_fake_output) Discriminator Loss 함수: 진짜 Pianoroll과 생성된 pianoroll 분포의 거리를 최대화 하기 위해 Wasserstein loss 함수를 사용. $\\frac{1}{m} \\sum_{i=1}^{m} [D_w(G(z^{i}|c^{i})|c^{i}) - D_w(x^{i}|c^{i})]$ 123456def wasserstein_loss(discriminator_real_output, discriminator_fake_output):&quot;&quot;&quot; Wasserstein GAN loss(Discriminator) D(G(z|c)) - D(x|c)&quot;&quot;&quot;return tf.reduce_mean(discriminator_fake_output) - tf.reduce_mean( discriminator_real_output) gradient penalty loss(aka WGAN-GP loss)를 사용한다. 그 이유는 D에 대한 gradient를 적절히 컨트롤 하는데 적합하기 떄문이고 G의 최적화에 도움을 준다. $\\frac{1}{m} \\sum_{i=1}^{m}(\\lVert \\nabla_{\\hat{x}^i}D_w(\\hat{x}^i|c^{i}) \\rVert_2 - 1)^2 $ 123456789101112131415161718def compute_gradient_penalty(discriminator, x, fake_x):c = tf.expand_dims(x[..., 0], -1)batch_size = x.get_shape().as_list()[0]eps_x = tf.random.uniform( [batch_size] + [1] * (len(x.get_shape()) - 1)) # B, 1, 1, 1, 1inter = eps_x * x + (1.0 - eps_x) * fake_xwith tf.GradientTape() as g: g.watch(inter) disc_inter_output = discriminator((inter,c), training=True)grads = g.gradient(disc_inter_output, inter)slopes = tf.sqrt(1e-8 + tf.reduce_sum( tf.square(grads), axis=tf.range(1, grads.get_shape().ndims)))gradient_penalty = tf.reduce_mean(tf.square(slopes - 1.0))return gradient_penalty GAN 모델 돌리는 방법 G와 D에 Adam 최적화 함수를 쓴다.(정교하게 하려면 SGD 를 써야 한다.) 체크포인트를 써서 매번 모델을 저장한다. 돌려보는 함수. G를 돌리는 함수 부분 1234567891011121314151617181920212223242526272829@tf.functiondef generator_train_step(x, condition_track_idx=0): ############################################ # G를 업데이트 한다.: maximize D(G(z|c)) ############################################ # 조건부 트랙을 뽑아서 real batch pianoroll을 만든다. c = tf.expand_dims(x[..., condition_track_idx], -1) # latent vectors의 batch data를 만든다. z = tf.random.truncated_normal([BATCH_SIZE, 2, 8, 512]) with tf.GradientTape() as tape: fake_x = generator((c, z), training=True) fake_output = discriminator((fake_x,c), training=False) # G 결과물의 Loss 계산한다. gen_loss = generator_loss(fake_output) # G의 gradient를 계산한다. gradients_of_generator = tape.gradient(gen_loss, generator.trainable_variables) # 제네레이터를 업데이트 한다. generator_optimizer.apply_gradients( zip(gradients_of_generator, generator.trainable_variables)) return gen_loss D를 돌리는 함수 부분 1234567891011121314151617181920212223242526272829303132333435363738394041@tf.functiondef discriminator_train_step(x, condition_track_idx=0):#############################################################################(2) D를 업데이트: (D(x|c)) + (1 - D(G(z|c))|c) + GradientPenality() 를 최대화############################################################################# 조건부 트랙을 뽑아서 real batch pianoroll을 만든다.c = tf.expand_dims(x[..., condition_track_idx], -1)# latent vectors의 batch data를 만든다.z = tf.random.truncated_normal([BATCH_SIZE, 2, 8, 512])# 훼이크 pianoroll을 만든다.fake_x = generator((c, z), training=False)# D의 파라미터들 업데이트with tf.GradientTape() as tape: real_output = discriminator((x,c), training=True) fake_output = discriminator((fake_x,c), training=True) discriminator_loss = wasserstein_loss(real_output, fake_output)# real, fake batch의 gradient를 계산grads_of_discriminator = tape.gradient(discriminator_loss, discriminator.trainable_variables)with tf.GradientTape() as tape: gp_loss = compute_gradient_penalty(discriminator, x, fake_x) gp_loss *= 10.0# real, fake batch의 GP-loss를 계산grads_gp = tape.gradient(gp_loss, discriminator.trainable_variables)gradients_of_discriminator = [g + ggp for g, ggp in zip(grads_of_discriminator, grads_gp) if ggp is not None]# D를 업데이트 해준다.discriminator_optimizer.apply_gradients( zip(gradients_of_discriminator, discriminator.trainable_variables))return discriminator_loss + gp_loss Multi-GPU 돌리는 방법 소개 텐서플로 MirroredStrategy 를 사용(계산 용이성) 어떻게 돌리는지?? 12345678910111213# 1. Strategy 만들고strategy = tf.distribute.MirroredStrategy()FLAG = Trueif strategy.num_replicas_in_sync &gt; 1 and FLAG: MULTIPLE_BATCH = strategy.num_replicas_in_sync print(f'분산환경 사용 &gt;&gt; GPU: {MULTIPLE_BATCH}')else: print(f'분산환경 미사용') MULTIPLE_BATCH = 1# 2. 모델을 strategy 안에 포함시킴.# 중요한 부분 : 학습 함수에서 나온 loss를 self.strategy.run에 넣고 strategy.reduce# 배치 사이즈를 num_replica_in_sync 갯수만큼 곱한다.# 출력을 포함한 자세한 코드는 My GitHub... https://github.com/NullSKool/MuseGAN_TF2.x/blob/main/museGAN_V3_tf2.ipynb","link":"/2021/09/06/Multi-GPU/"},{"title":"TF2","text":"Tensorflow 2.x 사용법Tensor 생성 tf.constant() : list, tuple, Array 를 Tensor로 바꿈 tensor = tf.constant(arr) tensor.dtype : 데이터 타입 확인 tf.cast(tensor, dtype=tf.uint8) : TF int8로 데이터타입 바꾸기 tensor.numpy() : numpy array로 바꾸기 Tensor에 랜덤한 숫자들 생성 numpy에서는 기본적인 normal distribution 생성 np.random.randn(9) : 9개의 불연속적이며 일정한 분포 난수 생성 Distribution에 따른 난수 생성 tf.random.normal 중심극한 이론에 의한 연속적인 모양 tf.random.uniform 불연속적이며 일정한 분포","link":"/2020/11/22/TF2/"},{"title":"Dacon도전기","text":"데이콘 도전 후기 흥미롭지만 쉽지는 않다. 말 그대로 새로운 파생변수, 모델을 많이 만들면 점수가 오르긴 한다. 데이콘_연습문제 연습용이긴 한데 BERT모델 폭격으로 양민학살 이 벌써부터 시작되었…ㅎㄷㄷ 버트모델 안쓰고도 순위 올릴수는 있다. 지금부터 그 방법을 소개합니다. 데이콘 순위를 올릴수 있는 방법 - 창의적인 modeling, K-cross Validation, parameter searching VDCNN은 GPU가 잘 버텨주면 0.86까지는 마구마구 올릴수 있음. 이것이 바로 VDCNN이당! 학습 모델을 그림으로 보기 여기에 여러 가지 모델 Ensemble 해보면 0.88은 가능해보일 것 같네요. 추가로 모델 Ensemble 을 시도 추가적으로 트랜스포머 모델링..(2020-12-09 추가…) Transformer","link":"/2020/12/06/Dacon%EB%8F%84%EC%A0%84%EA%B8%B0/"},{"title":"fpost2","text":"머신러닝과 딥러닝의 차이머신러닝 머신러닝은 정형 데이터 표 형태의 데이터 딥러닝은 비정형 데이터 그림, 사진, 오디오 형태의 자연 데이터 머신러닝 기초 준비물 충분한 용량(RAM 32GB++, SSD 512GB++, i7-10Gen++)의 데스크탑 권장! 가장 먼저 파이썬, 텐서플로우 를 설치합니다. 설치 버전 확인!! 매우 중요합니다! 파이썬 텐서플로우 넘파이 &amp; 싸이킷런 파이썬 버전을 여러개 설치 가능합니다. 이때는 환경 변수, IDE 경로 셋팅이 중요합니다. 윈도우라면 CMD보다는 powershell을 쓰는것이 편합니다. 제일 쉬운 방법은 아나콘다🛎… 하지만 용량이 큽니다. 써본 결과 리눅스에 도커가 최적 환경입니다⚙️. 추후 포스팅 예정 입니다.📯 Lets Burn the GPU!!🔥🔥🔥(TF2.0 wow!!)123456789101112131415161718192021import sysimport numpy as npimport tensorflow as tffrom datetime import datetime# tensorflow 실행모드를 확인합니다print(tf.executing_eagerly())shape = (int(10000), int(10000))startTime = datetime.now()with tf.device(&quot;/gpu&quot;): random_matrix = tf.random.uniform(shape=shape, minval=0, maxval=1) dot_operation = tf.matmul(random_matrix, tf.transpose(random_matrix)) sum_operation = tf.reduce_sum(dot_operation)result = sum_operationprint(result)print(&quot;\\n&quot; * 2)print(&quot;Time taken:&quot;, datetime.now() - startTime)print(&quot;\\n&quot; * 2) 이 모든걸 한번에 해주는 마법의 툴이 있으니. 바로 Docker다. (Linux 권장.) nano Dockerfile =&gt; docker build -t Nyan . =&gt; run -d Nyan 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118FROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04#================================================================================# Link Cupti#--------------------------------------------------------------------------------ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/local/cuda/extras/CUPTI/lib64#================================================================================# GPU DATA SCIENCE LIBRARY#--------------------------------------------------------------------------------RUN \\ apt-get update &amp;&amp; \\ apt-get install -y libomp-dev libopenblas-base &amp;&amp; \\ # Install pytorch gpu # uninstall cpu only packages via conda conda remove --force -y pytorch cpuonly &amp;&amp; \\ # https://pytorch.org/get-started/locally/ conda install cudatoolkit=11.2 -c pytorch -c nvidia &amp;&amp; \\ pip install --no-cache-dir torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html &amp;&amp; \\ # Install cupy: https://cupy.chainer.org/ pip install --no-cache-dir cupy-cuda112 &amp;&amp; \\ # Install pycuda: https://pypi.org/project/pycuda pip install --no-cache-dir pycuda &amp;&amp; \\ # Install gpu utils libs pip install --no-cache-dir gpustat py3nvml gputil &amp;&amp; \\ # Install scikit-cuda: https://scikit-cuda.readthedocs.io/en/latest/install.html pip install --no-cache-dir scikit-cuda &amp;&amp; \\ # Install tensorflow gpu pip uninstall -y tensorflow tensorflow-cpu intel-tensorflow &amp;&amp; \\ pip install --no-cache-dir tensorflow-gpu==2.5.0 &amp;&amp; \\ # Install ONNX GPU Runtime pip uninstall -y onnxruntime &amp;&amp; \\ pip install --no-cache-dir onnxruntime-gpu==1.8.0 onnxruntime-training==1.8.0 &amp;&amp; \\ # Install faiss gpu - TODO: to large? # conda remove --force -y faiss-cpu &amp;&amp; \\ # conda install -y faiss-gpu -c pytorch &amp;&amp; \\ # Update mxnet to gpu edition pip uninstall -y mxnet-mkl &amp;&amp; \\ # cuda111 -&gt; &gt;= 11.1 pip install --no-cache-dir mxnet-cu112 &amp;&amp; \\ # install jax: https://github.com/google/jax#pip-installation pip install --upgrade jax[cuda111] -f https://storage.googleapis.com/jax-releases/jax_releases.html &amp;&amp; \\ # Install pygpu - Required for theano: http://deeplearning.net/software/libgpuarray/ conda install -y pygpu &amp;&amp; \\ # Install lightgbm pip uninstall -y lightgbm &amp;&amp; \\ pip install lightgbm --install-option=--gpu --install-option=&quot;--opencl-include-dir=/usr/local/cuda/include/&quot; --install-option=&quot;--opencl-library=/usr/local/cuda/lib64/libOpenCL.so&quot; &amp;&amp; \\ # nvidia python ml lib pip install --upgrade --force-reinstall nvidia-ml-py3 &amp;&amp; \\ # SpeedTorch: https://github.com/Santosh-Gupta/SpeedTorch pip install --no-cache-dir SpeedTorch &amp;&amp; \\ # Ipyexperiments - fix memory leaks pip install --no-cache-dir ipyexperiments cd $RESOURCES_PATH &amp;&amp; \\git clone https://github.com/NVIDIA/apex &amp;&amp; \\cd apex &amp;&amp; \\# disable printing logging : &amp;&gt; /dev/nullpip install -v --disable-pip-version-check --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./ &amp;&amp; \\rm -rf apex &amp;&amp; \\ENV TF_FORCE_GPU_ALLOW_GROWTH trueRUN apt-get updateRUN apt-get install -y openssh-server language-pack-koRUN rm -rf /var/lib/apt/lists/*#===============================================================================# MISC#-------------------------------------------------------------------------------#Timezone SeoulENV TZ=Asia/SeoulRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezoneENV LC_ALL=ko_KR.UTF-8ENV LANG=ko_KR.UTF-8#===============================================================================# user [coder:coder]#-------------------------------------------------------------------------------ARG user=coderARG group=coderARG uid=1000ARG gid=1000ARG passwd=coderRUN groupadd -g ${gid} ${group} \\ &amp;&amp; useradd -u ${uid} -g ${gid} -m -s /bin/bash ${user} \\ &amp;&amp; echo &quot;${user}:${passwd}&quot; | chpasswd \\ &amp;&amp; adduser ${user} sudo \\ &amp;&amp; chown -R ${user} /home/${user}#=================================================================================#SSH SEtting#---------------------------------------------------------------------------------#RUN mkdir /var/run/sshdRUN sed -i &quot;s/.*PasswordAuthentication.*/PasswordAuthentication yes/g&quot; /etc/ssh/sshd_config#SSH login fix. Otherwise user is kicked off after loginRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshdENV NOTVISIBLE &quot;in users profile&quot;RUN echo &quot;export VISIBLE=now&quot; &gt;&gt; /etc/profileEXPOSE 22#=================================================================================#shell conf : Set Welcome Message#---------------------------------------------------------------------------------COPY bashrc.sh /etc/bash.bashrcRUN chmod a+rwx /etc/bash.bashrc","link":"/2020/10/24/fpost2/"},{"title":"Music Post","text":"일상을 끄적이다 - Mel Spectrogram 자동 분석을 위한 test page 입니다.M2U - March Of Fear비탄으로 가득 찬 이 도시 안에 떨어지는 Melody, 감정을 연기하는 춤추는 Endless rain… 거짓말로 얼룩진 관계들 속에 웃을 수 있는 거야? 세계를 노래하는 The March of Fear. We live in the tragedy! 유명한 비극과 같은 잔혹한 세계 속에 우리는 웃음짓고 있어. 이 세계를 비웃는 고결한 수호자들에게 지켜낼 것들은 두려웠던 자신뿐이니까! 숨을 멈춘 사람들 속에서 청명하게 울려퍼지는 Aria… 병든 마음으로 가득찬 이 세계에 폭격을 날려! 지금 웃고 있는 너도 Sociopath, 알잖아? 우리는 이 곳에 생명이 깃든 포성을 던져! 에픽세븐 OST 「Promise」깊은 절망 속에 갇혀 쓰러져 가는 나의 두 손을가만히 잡아 준 따스한 너의 온기를 아직난 기억해Now I can hear you눈을 감으면손 끝에서 널 느껴Now I can hear youI can find you이젠 알 수 있어 약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에끝이 보이지 않아도 때론 지쳐서 주저 앉아도약속해 희망을 우리 마음에 간절히 모아빛을 향해Now I can hear you눈을 감으면손 끝에서 널 느껴Now I can hear youI can find you이젠 알 수 있어약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에 다시 시작된 시간 다시 걸어가는 길함께하기에 나는 빛날 수 있어멀리 조금씩 보여 따뜻한 파란 빛이우리 마음을 여기에 모아 시작해 한번 더 약속해 Promise I promise 잊지 않을게우리 함께 나눈 약속들을Promise I promise 어둠을 지난N 번째 하늘 아래 약속들을 Promise I promise 어둠을 지난N 번째 하늘 아래 이곳에 개발중인 리듬게임에 쓰기 위한 Mel Spectrogram 분석중 입니다.약간 여운이 있는 노래인거 같습니다.","link":"/2020/10/26/fpost3/"},{"title":"Torch_스터디","text":"파이토치 모델을 C++로 가져오기 https://github.com/pytorch/pytorch/issues/43766 에서는 오래된 버전에서 model파일을 읽을 수 없는 현상이 있다. https://discuss.pytorch.org/t/how-to-load-part-of-pre-trained-model/1113/25 하지만 텍스트 파일화 하면 오래된 버전에서도 읽기가 가능하다. torch.jit 을 사용하는 방법도 있지만 시간이 걸리더라도 확실하게 텍스트 화 한후 C++ 임베디드에 올리기 위해서는 모델 직렬화도 필수이다. 텍스트화 하는 방법을 소개한다. state_dict 안에 있는 dictionary들을 전부 텍스트로 저장한다. dictionary를 parsing 하면서 내용을 읽는다, 하지만 그냥 읽어서는 안되고 파라미터를 구조화 해서 읽고model_state안에 다시 복사한 뒤 모델로서 로딩한다. 텍스트 파일에는 가중치와 파라미터들이 들어있다. 그냥 오픈해서 읽으면 메모리 FULL 나기 십상이니 head -5 처럼 일부분을 화면에 표시해야 한다.","link":"/2022/04/06/Torch-%EC%8A%A4%ED%84%B0%EB%94%94/"},{"title":"rl-video-summ","text":"비디오 요약 모델 현실에서 하이라이트 장면 편집하려고 하면 편집 프로그램이 너무 비싸다. 간단히 설계할 수 있는 YasuoNet 같은 지도학습 모델은 데이터셋의 하이라이트를 일일이 라벨링이 들어간다. 만약 시간이 긴 비디오 데이터라면?? 정말 끔찍한 비용이 소모된다. GPU 계산용량이 점점 올라가면서 비디오에도 강화학습을 적용할 수 있을지 않을까 상상만 했었는데 이미 5년전에 있었다.","link":"/2022/10/16/rl-video-summ/"},{"title":"training_pc","text":"딥러닝 공부 후기 비정형 데이터를 다룰려면 GPU는 필수다. Why GPU ?? CPU보다 더 빠른 병렬 처리 가능 행렬곱 계산이 CPU보다 훨씬 빠름 계산 그래프 빌드, 처리 속도가 빠름. 비정형 데이터 처리엔 GPU가 필수 음성 딥러닝, 나도 해볼까?음성 딥러닝 음성 딥러닝은 결코 쉽지 않다. 딥러닝계의 보스급.신호처리 배워야 그나마 수월하다.초반 Feature Extraction 경험을 쌓는것을 권장한다.RNN계열의 LSTM으로 시작. 하지만,Attention, Transformer 날코딩 등 논문 구현 경험이 매우 중요하다.Mel Spectrogram을 한다 해도 원리를 잘 알아야 나중에 모델링과 데이터 분해가 쉽다. 딥러닝 입문 방법딥러닝 입문 하려면 수학은 필수. 정말 중요. 논문 구현 시도해보기1논문 구현 시도해보기2 어떤 논문에는 파라미터 하나도 없는 것도 있다.레이어 구조도만 있고 파라미터가 없는 것은 진짜 구현난이도 보스급. 딥러닝 자격증 취득 후기 문제 유형 Category 1: Basic model Category 2: Model from learning dataset Category 3: Image classificationConvolutional Neural Network with real-world image dataset Category 4: Natural language processing (NLP)NLP Text Classification with real-world text dataset Category 5: Time series, sequences and predictionsSequence Model with real-world numeric dataset 이 시험은 응시자가 TensorFlow 2.x를 통해 모델을 빌드하여 문제를 해결할 수 있는지테스트합니다. 머신러닝(ML) 및 딥러닝의 기본 원칙 TensorFlow 2.x에서 ML 모델 개발하기 심층신경망 및 합성곱 신경망(CNN)을 통한 이미지 인식, 객체 탐지, 텍스트 인식 알고리즘 빌드 컴퓨터가 정보를 ‘보는’ 방식과 플롯 손실 및 정확도 이해할 수 있도록 다른 크기 및 형태의 실제 이미지를 활용하여 합성곱에서 이미지의 경로를 시각화 과적합을 예방하기 위한 확장 및 드롭아웃과 같은 전략 탐색 TensorFlow를 이용하여 자연어 처리 문제를 해결하기 위해 신경망 적용 Google 공식 페이지 발췌 합격 점수 / 규칙 허용된 인터넷 브라우징은 Tensorflow document, 총 100점 만점에 90점 커트라인 난이도는 category 5가 가장 높음 시험 시간 : 5시간 (컴퓨터 딥러닝 훈련시간 포함) 그럼 20000~!","link":"/2020/11/16/training-pc/"},{"title":"게임개발-일기2","text":"게임 개발 2번째 포스트 데이터 샘플링 방법에 관한 스터디 https://forum.unity.com/threads/solved-how-to-sample-transform-position-with-a-precision-of-a-frequency-of-60hz-with-unity3d.442160/ 간단한 방법 : FixedUpdate 설정 약간 더 정확한 방법 : Realtime 타이머를 만들어서 Multi-Thread locking을 사용(타이머와 샘플링 로직을 스레드별로 분리) 두둥~ 드. 디. 어 데이터 추출!! 앗…! 원래 데이터 하지만 뭔가 비약했었다. 샘플링한 디바이스 센서 값들이 중복이 있었다. 그냥 Input.accel.y 단순히 이렇게 샘플링하면 초당 프레임 레이트가 저하되고 데이터가 밀리거나 싱크가 어긋나서 많은 데이터 중복이 발생한다. 일반적인 텍스트 크롤링보다 구현 난이도 있는 편. 개선된 데이터 멀티스레드 like한 코루틴으로 타이머 로직을 만들어 샘플링한 데이터다. 약간 보기 좋고 깔끔하다. 다행히 데이터 중복현상도 거의 없어졌다. 유니티 프로젝트 셋팅만 건들면 더 좋아질 것 같다. 시간은 Audio Source 속성의 playtime이 아닌 TimeStep 개념으로 접근해야 데이터 샘플링이 더욱 수월하다. 과연 어디에 쓰이는 데이터일까? Anomaly Event Detection, Game Play Pattern generation(Audio Dynamics …)에도 쓰이는 데이터이다. 이벤트 감지에 활용?!. 데이터 학습할때 절.대.로 데이터 전체를 그대로 넣으면 안된다. 분명 메모리 OOM이 날 것이다. 저번 포스트에서 나온 개념인 Data Windowing를 써야 하는 이유이다. (Batch size보다 우선.) 이 데이터를 게임에 넣고 결과는??","link":"/2022/10/16/%EA%B2%8C%EC%9E%84%EA%B0%9C%EB%B0%9C-%EC%9D%BC%EA%B8%B02/"},{"title":"게임개발 일기","text":"게임개발 후기데이터를 모으기 위한 Android 앱 만들기앱을 최적화하려면 라이브러리 특성, 자료 구조를 알아야 가능. 앱 최적화 시도StreanWriter에 WriteLine을 써서 로깅을 하게된다면일반적인 File.CreateText에 비해서 리소스를 겁나게(!) 많이 먹는 현상이 발생한다.계속 버퍼가 열려 있으면 오버헤드가 나기 십상이기 때문이다.단순한 데이터일 경우에는 단순한 라이브러리를 써야 한다.그렇지 않으면 리소스 소모 급증과 엄청난 메모리 사고가 발생한다.리소스 소모량 급증을 막기 위해서는 StreamWriter 대신 문자열을 계속 더해주는 StringBuilder를 사용하자. 라이브러리 하나만 바꿨을 뿐인데…최적화 이후에는 예전보다 cpu 점유 시간이 엄청나게 개선되었다. 그 이전에는 엄청난 렉, 끊김 크리티컬.(update 함수에 WriteLine을 쓰게되면 화면 프레임이 초당 10프레임으로 낮아지고 렉, 싱크 어긋남 크리티컬.) 게임개발 앞서 선형대수는 필수 로컬과 월드 좌표계를 헷갈리면 매우 큰일난다. 뿐만 아니라 Collider, 속도 가속도 등 물리지식도 필수.. 캐릭터가 이상하게 움직이는 버그도 나기 십상이다. (to be continue…) 최적화 방법은…API 문서를 일단 보면서 각 함수의 특징을 잘 알고 코딩을 해야 한다.로직은 최대한 단순화(여러 가지 변수를 컨트롤 하려면 GameManager를 두는 방법)특히 실행중 로직에 절대 Find() SendMessage() 같은 함수를 쓰면 최소 1000배 느려진다. 메모리 힙 재할당은 렉의 근본 원인… (GC 발동을 최대한 막아야 한다 !!) 문자열 속성에 자주 접근하면 그만큼 속도 저하 유니티에서 클래스는 참조 형식이라 GC 대상임. Destroy 자주 쓰지 말고 오브젝트 풀링… CPU는 나눗셈이 곱셈보다 더 느림. –&gt; 제곱근(루트)를 계산하는 경우는 1/2를 제곱한다.","link":"/2021/06/17/%EA%B2%8C%EC%9E%84%EA%B0%9C%EB%B0%9C-%EC%9D%BC%EA%B8%B0/"},{"title":"논문 리뷰","text":"딥러닝 논문 리뷰 RNN의 고질적인 문제점… Sequence가 길면 i번째 output을 만들기 위해 그 이전의 i-1번째 hidden state를 사용한다. Long Term Dependency problem… 이걸 해결하기 위해서는 Recurrent Layer 대신 Attention Mechanism을 쓰면 Sequence 길이에 상관없이 input / output의 Dependency를 보다 정확히 감지… RNN을 완전히 제거해야 함. 트랜스포머를 써야 하는 이유? 현재 Video Understanding 모델에서도 시도되고 있음(TimesFormer; 기존 프레임 단위로 쪼갠 CNN모델에 비해서 메모리 절감과 Inference 속도 향상) Timesformer 은 효과적인 프레임별 델타값만 감지 : 비디오를 Patch단위로 분석함 Positional Encoding을 시간축에 확장한 모델, 시간축과 공간축 전체를 어텐션 하면 Cost가 너무 크기 때문 밀리초 단위로 결판이 나는 게임 판독에도 정말 용이할것으로 기대됨. 트랜스포머의 특징 RNN 계열은 순서대로만 처리 가능해서 학습 속도가 느림. 하지만 트랜스포머는 병렬 처리가 가능…How? Encoder-Decoder 모델을 통해서 병렬 처리 ENcoder에서는 각각 position에 대해 Attention만 하고, Decoder에서는 Masking 메커니즘으로 병렬 처리가 가능 Encoder는 input Sequence를 다른 표현으로 치환 Decoder에서는 ENcoder으로부터 Output Sequence를 하나씩 생성 각각 step에서 다음 symbol을 만들 때 이전에 만들어진 output을 쓴다.(자기 회귀적인 특성) ex : “여기는 어디 나는 누구” 라는 문장에서 “여기는 어디” 라는 symbol으로 “나는 누구” 를 만들 수 있습니다. Transformer 전체 구조 Encoder Input Embedding은 Time Embedding, 자연어에 쓰이는 Word Embedding 등 여러 종류가 있음 그 중에서 Time Embedding을 소개.$$\\mathbf{t} 2 \\mathbf{v}(\\tau)[i]=\\left{\\begin{array}{ll}\\omega_{i} \\tau+\\varphi_{i}, &amp; \\text { if } i=0 \\\\mathcal{F}\\left(\\omega_{i} \\tau+\\varphi_{i}\\right), &amp; \\text { if } 1 \\leq i \\leq k\\end{array}\\right.$$ ax+b처럼 생긴 저 식에 함수를 넣어서 시간별 정보를 실어야 함.i는 Timestep… 시퀀스의 시작점은 그냥 ax+b만을 쓴다.전체 시퀀스 데이터에 적용하려면 주기성을 갖는 함수(파장, 주기, 주파수 등)를 사용해야 하는데relu를 사용하면 주기성 정보가 없으니…당연히 안될듯..(!) y = wx + b concat sin(wx+b) 각 타임스텝별로 주기성 정보를 주입 12345678910111213141516171819202122232425262728293031323334# tf.Keras.Layerclass Time2Vector(Layer): def __init__(self, seq_len, **kwargs): super(Time2Vector, self).__init__() self.seq_len = seq_len def build(self, input_shape): '''shape (batch, seq_len) 형태로 가중치와 Bias 초기화 ''' self.weights_linear = self.add_weight(name='weight_linear',shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.bias_linear = self.add_weight(name='bias_linear', shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.weights_periodic = self.add_weight(name='weight_periodic',shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.bias_periodic = self.add_weight(name='bias_periodic',shape=(int(self.seq_len),), initializer='uniform', trainable=True) def call(self, x): '''주기성, 선형 시간별 특징을 계산''' x = tf.math.reduce_mean(x[:,:,:], axis=-1) # 입력 Feature 차원 슬라이싱 time_linear = self.weights_linear * x + self.bias_linear # 선형 시간 특징 time_linear = tf.expand_dims(time_linear, axis=-1) # 차원 추가 (batch, seq_len, 1) time_periodic = tf.math.sin(tf.multiply(x, self.weights_periodic) + self.bias_periodic) time_periodic = tf.expand_dims(time_periodic, axis=-1) # 차원 추가 (batch, seq_len, 1) return tf.concat([time_linear, time_periodic], axis=-1) # shape = (batch, seq_len, 2) positional Encoding$$\\begin{array}{l}P E_{(\\text {pos } 2 i)}=\\sin \\left(\\frac{\\text { pos }}{10000^{\\frac{2 i}{d_{\\text {model }}}}}\\right) \\P E_{(\\text {pos 2i+1) }}=\\cos \\left(\\frac{\\text { pos }}{10000^{\\frac{2 i}{d_{\\text {model }}}}} \\right)\\end{array}$$ positional Encoding이 계산되는 과정 : Time Embedded Input + positional vector -&gt; Time Embedded vector positional Encoding을 해야 하는 이유 :이후 Attention Layer의 Q, K, V에 보다 명확한 Sequence에 대한 정보를 반영하기 위해(sequence vector간의 거리 확실화) ex &gt; embedding size 512일때 : (-1~1의 값으로 이루어진) sin 함수로 처리된 256사이즈 벡터 + cos로 처리된 256사이즈 벡터 생성 AttentionLuong Attention, Badanau Attention, self-Attention 등 Task에 따라 다름.그 중에서 Self-Attention … @ : matmul (벡터 내적곱)T : 전치행렬(Transpose)^1/2 : 루트 Attention(Q, K, V) = softmax( Q @ K.T / d_k^1/2) @ VV를 곱하는 이유 : softmax된 스코어에 value를 곱해서관련이 없는 시퀀스에다 1e-4 같은 작은 스코어를 곱해 없앤다. 이렇게 Attention score가 계산된다. Multi-Head Attentionn_head * Concat( softmax( Q @ K.T / d_k^1/2) @ V ) @ W0feed forward Neural Network( tf.keras.layers.Dense )에 입력을 주기 위해하나의 행렬로 head마다 계산된 softmax된 스코어를 전부 합치고 W0를 곱한다. 12345 |---Residual connect----| |---Residual connect-------|Attention ----&gt; LayerNormalize --&gt; FeedForwardNeuralNetwork -&gt; LayerNorm | | |&lt;------------- N repeat --------------------------------------------&gt;| |----------------------Encoder #1-------------------------------------| 멀티헤드 어텐션의 장점 : 모델이 서로 다른 위치에서 서로 다른 표현 부분 공간 정보에 공동으로 관여 커버로스, 히드라, 자쿰은 머리가 여러개라 위치가 다양한 여러 플레이어를 인식하고 동시다발로 데미지를 가함. Decoder 디코더 구성 Output에 대해 Right Shift 하고 Embedding, Positional Encoding 이 이루어짐. Right shifted 된 입력을 받는 이유 : 디코더는 이전 시퀀스에 대한 토큰과 어텐션 스코어를 기반으로 다음 시퀀스를 예측하는 방식으로 작동된다. 시퀀스의 처음 토큰 이전에 시작임을 알리기 위한 특정 토큰이 삽입되어 없는 시퀀스에 대한 예측 에러을 방지해 준다 Masked Attention은 다음 시퀀스와의 유사성을 무시하기 위해 Masking을 적용 이후는 Encoder와 같은 구조의 레이어로 쌓여 있음. 디코더 에서는 인코더와는 다르게 Masked Multi-Head Attention layer가 추가되었다. Masked Attention의 원리: 시계열 데이터를 예로 들자면 오늘 5000원 받았는데 이것저것 샀다. 그래서 내일은 오늘보다 잔액이 감소할 것이다. Masked Attention의 시계열 데이터를 계산하는 과정은.. 미래를 예측하기 위해 현재의 값만 알려주고(미래 시퀀스와의 유사도를 계산하면 안되서…) 미래의 값을 가려버리는 방식으로 학습.. 1234567891011오늘의 잔고 내일 잔고 모레 잔고 글피 잔고 5000원 -inf -inf -inf5000원 3000원 -inf -inf5000원 3000원 2000원 -inf5000원 3000원 2000원 1000원 |---Residual connect----| |---Residual connect-------|MaskedAttn-LayerNorm--&gt; Attention ----&gt; LayerNormalize --&gt; FeedForwardNeuralNetwork -&gt; LayerNorm | | |&lt;------------------------------- N repeat --------------------------------------------&gt;| |&lt;---------------------------------------Decoder #1-------------------------------------| Final Output Layer 분류기(softmax), 회귀예측(Linear) 레이어를 붙여서 태스크에 맞게 바꿔끼면 된다.","link":"/2021/07/15/%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0/"},{"title":"딥러닝 입문과 준비","text":"딥러닝 시작해보기Tensor 이해하기 차원 0차원(상수) : Scalar값 1차원(리스트 씌운 상수), 2차원(2d), 3차원(3d), 4차원(4-d), n차원(n-d) : Tensor Numpy로 Tensor 표현과 응용이 가능 123456import numpy as nparr = np.array([[3, 6, 9], [2, 4, 8]])print(arr.dtype) # dtype('float64')print(arr.shape) # (2, 3)print(arr.size) # 2 * 3 = 6 차원 늘리기와 줄이기 reshape, -1 활용 123arr.reshape(-1) # 1차원으로 펼치기arr.reshape(-1, 3) # 첫번째 차원은 알아서, 두번째 차원은 shape 3 Ravel() : arr의 차원을 1로 바꿈(==&gt; Flatten) 123arr = np.array([[1, 2, 3], [4, 5, 6]]) # (2, 3)arr.ravel()arr.shape #(6, ) np.expand_dims() : 값을 유지하고 차원만 늘릴때 12arr = np.expand_dims(arr, -1) #(6, 1)arr.shape numpy array를 빠르게 채우는 방법! 1234567891011121314# 0으로 채우기arr2 = np.zeros([3, 4]) # 3 * 4의 0이 채워진 배열one2 = np.ones([3, 4]) # 3 * 4의 1로 채워진 배열five2 = np.ones([3, 4]) * 5 # 1로 채운 값에 5를 다 곱함arr2 = np.arange(n, m) # n ~ m-1까지의 수로 배열 채우기# array([n ~ m-1])arr = np.arange(5, 11).reshape(2, -1) # 5 ~ 10 : 6개의 숫자, (2, 3)arr # array([5, 6, 7] # [8, 9, 10]) 모양이 맞지 않으면 Error… 5, 6, 7, 8, 9는 5개의 숫자 5 * 1 만 가능한. Index &amp; slicing 123456789101112131415# 리스트 인덱스 &amp; 슬라이싱nums = [2, 3, 4, 5, 6]nums[:-1] # 마지막 숫자 전까지 표시nums[::-1] # 리스트 안의 숫자를 거꾸로 표현nums = [[1, 2, 3], 4, 5, 6, 7]print(nums[0][1]) = 2 # 첫번째 리스트 안의 인덱스가 1인 숫자arr = np.array([5, 6, 7], [8, 9, 10])print(arr[1, 2]) # 10 --&gt; 인덱싱 [행, 열]print(arr[1:, 1:]) # [[9, 10]] Boolean Indexing1234data = np.random.randn(3, 3)print(data&lt;=0) # False, True로 나옴data[data &lt;=0] = 1 # 0 이하인 것을 1로 채우다","link":"/2020/11/22/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%84/"},{"title":"딥러닝-입문과-준비4","text":"딥러닝 시작해보기-4인공신경망과 손실함수 인공신경망의 기본 구조 뇌의 학습방법을 수학적으로 모델링한 기계학습 알고리즘 기본 구조 : y = Wx+b \\(x_i\\) : 입력, \\(w_i\\): 가중치, b : bias, f: 활성화함수 u : 결합(Net), z: 출력 뉴런에는 선형 결합과 활성화 함수 기능이 들어있음 입력층, 은닉층, 출력층으로 구성됨 각 노드의 뉴런 출력은 직접 전달되는 정보에만 의존할 뿐 다른 노드와는 무관 그래서? 병렬처리가 가능함. 손실 함수(Loss or Cost function) 신경망의 출력값과 실제 결과값의 차이를 정의하는 함수 신경망 학습목표는 손실함수를 최소화 하는 방향으로 움직여야 함 SGD, Adam 등의 학습 최적화 알고리즘 손실 함수 회귀(Regression) 제곱 오차(MSE) 사용, 최근에는 rmse, mae의 장점이 있는 Huber Loss 사용하는 추세 Huber Loss?MAE + MSE -&gt; for Time Series Data!! 분류(Classification) 활성화 함수 : softmax, 손실함수 : cross-entropy 알고리즘과 역전파 학습 알고리즘 경사 하강법: 기울기를 이용하여 손실함수 S(\\(\\theta\\)) 값을 최적화 gradient(기울기)의 반대 방향으로 일정 크기만큼 이동하는 것을 반복하여 손실함수의 값을 최소화하는 \\(\\theta\\)의 값을 찾음 \\[\\theta = \\theta - \\eta \\nabla_\\theta S(\\theta)\\] 이 떄 \\(eta\\) 는 미리 정해진 learning rate(step size) 이고 보통 1e-3 ~ 1e-4 정도를 사용 역전파 계산 그래프 노드는 연산을, 엣지는 데이터의 흐름방향 sigmoid 함수 역전파 합성함수 미분법(Chain Rule) 행렬연산과 역전파 1 이진분류 2-layer NN 역전파 to be continued…","link":"/2020/11/24/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%844/"},{"title":"딥러닝 입문과 준비2","text":"딥러닝 시작해보기-2Broadcast두개의 행렬 shape가 서로 달라도한쪽의 차원이 같거나, 연산하는 값이 한 개일때shape에 맞게 복사해서 연산함 123456789101112131415161718192021arr = np.arange(6).reshape(-1, 3)# [[0, 1, 2], # [3, 4, 5]]arr + 3# [[3, 4, 5],# [6, 7, 8]]arr * 3# [[0, 3, 6],# [9, 12 15]arr + np.array([1, 2, 3])# [[1, 3, 5],# [4, 6, 8]]np.add(arr, 1)# 모든 원소에 1을 더함np.multiply(arr, 3)# 모든 원소에 3을 곱함 argmax, argmin 배열의 큰 값이나 작은 값의 index return 1234arr = np.array([1, 4, 6, 54, 3, 2])np.argmax(arr) # 54np.argmin(arr) # 1np.unique(arr) # 유일한 값 출력","link":"/2020/11/22/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%842/"},{"title":"딥러닝-입문과-준비6","text":"딥러닝 시작해보기-6💥Remind!! 딥러닝에 비선형 활성화 함수를 사용하는 이유 선형 함수로는 XOR과 같은 non-linear한 문제는 해결이 안됨;; 그러면 Hidden Layer를 늘리면 되지 않을까? $$f(ax+by) = af(x) + bf(y)$$ 라는 특징 때문에 N-layer 깊이를 아무리 쌓아도 1-Layer로 동작함. 최적화(Opt) 알고리즘 경사하강법(GD)$$\\theta = \\theta - \\eta \\nabla_\\theta S(\\theta)$$ Network의 parameter=\\(\\theta \\) 로 할때 손실함수 \\(J(\\theta)\\)의 값을 최소화하기 위해 기울기\\(\\nabla J(\\theta)\\)를 이용하는 방법GD에서는 Gradient의 반대 방향으로 일정 크기(lr)만큼 이동하는 것을 반복하여 loss function의 값을 최소화 하는 \\(\\theta \\)의 값을 찾음, lr \\(\\eta\\) 는 보통 1e-3 ~ 1e-4 사이에서 사용함. 너무 크면 global minimum을 지나치고 너무 작으면 Local Minimum에 빠짐. 확률적 경사하강법(SGD)전체 Training set을 사용하는 것을 batch Gradient Descent, 계산량이 많아지는 것을 방지하기 위해mini-batch에 대해서만 손실함수를 계산하는 확률적 GD를 사용함.같은 시간에 더 많은 step를 갈 수 있음, 여러번 반복할 경우 batch의 결과와 비슷함 GD vs SGDGD : 확실한데 너무 느림 | SGD : 조금 헤메지만 빠름 Momentum : 현재 Gradient를 통해 이동하는 방향과 별개로 과거의 이동방식을 기억하면서 일종의 관성을 주는 방식 AdaGrad(Adaptive Gradient) 많이 변화했던 변수들은 step size를 작게 하는 것자주 등장하거나 변화를 많이 한 변수들은 optimum에 가까이 있을 확률이 높기 때문에 작은 크기로 이동하면서 미세조절 적게 변화한 변수들은 많이 이동해야할 확률이 높기 때문에 먼저 빠르게 loss값을 줄이는 방식으로 이동하는 방식학습을 계속 진행하면 step size가 너무 줄어드는 단점이 있음. RMSProp합을 지수평균으로 대체하여 Adagrad의 단점을 해결G가 무한정 커지지는 않으면서 최근 변화량의 변수간 상대적인 크기 차이는 유지할 수 있음. AdamMomentum + RMSProp 지금까지 계산해온 기울기의 지수평균을 저장 rmsprop과 유사하게 Gradient의 제곱값의 지수평균을 저장 Overfitting(과적합) Training Set의 지엽적인 특성까지 반영해 Variance High로 Training되어서 Training Set을 암기해버리는 현상 Test Set을 잘 예측하지 못함 주로 표현력이 높은 모델, 즉 파라미터가 많은 모델에 발생 정규화(Regularization) 손실함수에 가중치의 크기를 포함 가중치가 작아지도록 학습한다는 것은 Outlier(Noise)의 영향을 적게 받음 L2 정규화 Rigde Regression L1 정규화Sparse Model에 알맞음.. 작은 가중치들이 거의 0으로 수렴하여 몇개의 중요한 가중치들만 남음. Lasso Regression 미분 불가능한 점이 있기 때문에 Gradient-Base Learning에는 주의.. DropOut각 레이어의 일정 비율로 뉴런의 출력 값을 0으로 만들어 나머지 뉴런들로 학습하는 방법과적합을 효과적으로 예방 가능(Network 내부의 Ensemble 학습으로 볼 수 있음) 역전파는 ReLU처럼 동작Forward Propagation때 시그널을 통과시킨 뉴런은 Backward때도 통과시킴drop된 뉴런은 Backward Propagation때도 시그널 차단 반면, TEST때는 모든 뉴런에 신호를 전달함 Batch Normalization학습하는 이전 층의 파라미터 변화로 현재층의 입력 분포가 바뀌는 현상을 내부 공분산 변화(Internal Covariate Shift)이전 층의 작은 파라미터 변화가 증폭되어 뒷 레이어에 큰 영향을 받음.그래서… BN(2015) Gradient Vanishing, Exploding을 방지하는 대표적인 방법 직접적인 방법임. Training 과정 자체를 안정화시켜 학습속도를 가속화 평균과 분산을 조절하는 과정이 NN 안에 포함 되어 있다는 것이 핵심적 Training할때각 Mini Batch마다 \\(\\gamma\\) 와 \\(\\beta\\)를 구하고 저장해 둠 Test할때구했던 \\(\\gamma\\) 와 \\(\\beta\\)의 평균을 사용 Data Augmentation일종의 Regularization작업, 데이터가 적을 때 사용하면 매우 효과적즉 데이터 변형","link":"/2020/11/27/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%846/"},{"title":"딥러닝-입문과-준비3","text":"딥러닝 시작해보기-3차원수 늘리기, 줄이기(TF2.x)1234567x = tf.expand_dims(x, 1)x.shape # (x.shape, 1)x[..., tf.newaxis].shape # (x.shape, 1)np.squeeze(x[0]).shape # x.shape 차원 줄이기 TF2.x LayersConvolution filters : layer에서 출력될때 몇개의 filter kernel_size : filter(weight) 의 사이즈 strides : 몇 개의 pixel만큼 skip하면서 sliding window 할 것인지 padding : same, zero activation : 활성화 함수(Linear function은 층을 쌓는 의미가 없다) to be Continued…","link":"/2020/11/23/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%843/"},{"title":"딥러닝-입문과-준비7","text":"딥러닝 시작해보기-7합성곱(Convolution) Convolution? 정의 합성곱 연산은 두 함수 f, g 가운데 하나의 함수를 반전(reverse), 전이(shift)시킨 다음, 다른 하나의 함수와 곱한 결과를 적분하는 것을 의미한다. 이를 수학 기호로 표시하면 다음과 같다. 또한 g 함수 대신에 f 함수를 반전, 전이 시키는 경우 다음과 같이 표시할 수도 있다. 이 두 연산은 형태는 다르지만 같은 결과값을 갖는다. 위의 적분에서 적분 구간은 함수 f와 g가 정의된 범위에 따라서 달라진다. 또한 두 확률 변수 X와 Y가 있을 때 각각의 확률 밀도 함수를 f와 g라고 하면, X+Y의 확률 밀도 함수는 \\(f * g\\)로 표시할 수 있다. – Wikipedia 무엇인지 모르겠죠? 쉽게 말하자면 기존 MLP에서는 이미지가 살짝이라도 회전이 되거나 위치 이동이 있다면 신경망 자체를 다시 학습해야 하지만 CNN은 이미지의 변화가 있어도 재학습 없어도 가능함. 모든 pixel을 비교할 게 절대 아님. Feature 추출에 중점을 둠. 사진에 보이는 \\(C_in * C_out\\)번의 합성곱 연산 bias는 하나의 벡터 Filter(kernel)의 크기에 따라 영상의 크기가 줄어드는 문제점을 해결하기 위해 padding을 쓴다. 크기가 (2N + 1)인 커널에 상하좌우에 N개 Zero padding을 해주면 된다. Sliding Window 방식으로 커널이 이동되는데 그 크기를 조절하려면 Stride를 쓴다. 너무 크면 출력 Feature Map이 과도하게 줄어드는 경우가 발생한다. 보다 효율적인 Conv 연산을 하기 위해서는 1x1 Conv를 넣는다 연산량, 파라미터 개수를 줄이기 위해 BottleNeck 구조를 활용한다. 하필 1x1 ?? 3x3 filter 한개와 1x1 + 3x3 parameter 비교 그래도 모르겠다면?? 12345678910111213141516import numpy as npnp.random((3, 3)).shape == (np.random((3, 1)) * np.random((1, 3)).shape)&gt;&gt; True# keras# k - kernel_size(ex. 3, 5, 7...)# n_filter - number of filters/channels 필터 갯수conv1_1 = Conv(n_filters, (1, k))(input_1)conv1_2 = Conv(n_filters, (k, 1))(conv1_1)# 왜 병목?conv2 = Conv2D(96, (1, 1), ...)(conv1) # 줄였다가(receptive Field는 그대로, Feature map을 미리 줄임.)conv3 = Conv2D(96, (3, 3), ...)(conv2) conv4 = Conv2D(128, (1, 1), ...)(conv3) # 다시 늘림 항등행렬을 떠올리면 이해가 갈것이다. CNN 만들었는데 너무 느리네? 어떻게 하면 빠르게 할 수 있을까… Conv filter를 더 넓게 쓴다. –&gt; GPU 연산이 쉬워진다 12345# 이렇게 되어있는 걸conv = Conv2D(96, (3, 3), ...)(conv)conv = Conv2D(96, (3, 3), ...)(conv)# 아래처럼 바꾼다.conv = Conv2D(128, (3, 3), ...)(conv) GPU는 병렬로 처리하기 때문에 필터 갯수를 늘리면 더욱 빨라진다. 쉽게 말하면 96개씩 두번보다 128개씩 한번이 더 빠르다. 설명. 96 // 3 = 32 2- layer을 1- layer로 바꿀땐 32 // 2 = 16 16^0.5 = 4 4 * 32 = 128 또 다른 방법 각 채널에서 별도의 2d conv를 하는 방법 in_channels * channel_multipliter 중간채널은 연결되고 1x1 conv로 out_channels에 매핑 1234# Kerasfrom keras.layers import SeparableConv2Dnet = SeparableConv2D(32, (3, 3))(net)# it's almost 1:1 similar to the simple Keras Conv2D layer 출처 : source1 source2","link":"/2020/11/30/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%847/"},{"title":"딥러닝-입문과-준비5","text":"딥러닝 시작해보기-5선형대수 배워보기(행렬을 아무리 곱하고 더해도 선모양)Scala : 크기만 존재하는 양Vector : 속도, 위치이동, 힘, 공간뒤틀림과 같이 크기와 방향이 모두 존재하는 양 Norm ? n차원 벡터 $$\\vec{x} = (x_1, x_2, \\cdots x_n)$$Norm $$\\lVert x \\rVert = \\sqrt{x_1^1 + x_2^2 + \\cdots + x_n^2}$$ “원점 O에서 점\\(x_1, x_2, \\cdots, x_n\\) 까지의 거리” 내적 ? Inner product, Dot product행렬끼리 곱할 때는 차원을 주의한다. A(m, n) * B(n, m) 만 가능 Transpose: 전치행렬(행과 열을 뒤바꿈) A.T numpy 연산(Element-wise operation) np.dot(x, y) (aka 내적, dot-product)와 x * y(element-wise)는 서로 다름. numpy 비교, 논리연산(element-wise operation)numpy Reductions argmax() : 최대값있는 인덱스를 리턴, argmin() : 최소값의 인덱스 리턴 np.all, np.any? ALL : Array내 모든 값이 TRUE인가? any : Array내 값이 하나라도 TRUE인가? np.mean, np.median, np.std 등 통계함수 사용 가능딥러닝에 대한 환상 복잡한 문제도 층을 깊고 넓게 쌓으면 해결된다 –&gt; Gradient Vanhshing, Initialize fault 으하하핰ㅋㅋㅋ $$Sigmoid(z) = \\frac{1} {1 + e^{-z}}$$ Sigmoid 도함수의 최대값은 1/4 … –&gt; 그래서 Gradient Vanishing 나는거임 ㅇㅇ 가중치 초기화 초기화의 중요성 $$t = wx+b$$ 에서 w가 100, b가 50이라면 x가 0.01이더라도 t는 51이 됨 역전파때 sigmoid 함수 통과시키면 \\(\\sigma’ (51)\\) 리턴됨 하지만 t가 5만 넘어도 \\(\\sigma (t)\\) 는 0에 수렴 –&gt; 이것이 바로 Gradient Vanishing… 그래서 입력층의 가중치w를 모두 0으로 리셋! Forward Propagation때 두번째 층 뉴런에 모두 같은 값이 전달됨 Backward Propagation때 두째 층 가중치가 모두 똑같이 업데이트 ==&gt; 신경망 표현력 제한 Bias는 0으로 초기화하는게 일반적으로 효율적 가중치 초기화 2 표준 정규분포를 이용한 가중치 초기화 Sigmoid함수의 출력값이 극단적으로(0 or 1)에 치우치는 현상 –&gt; Gradient Vanishing 표준편차를 0.01로 하는 정규분포로 초기화 가중치가 모여 있음 =&gt; 기울기 소실 문제 어느정도 완화됨 가중치 초기화 3 Xavier초기화 방법(2010) 1w = np.random.randn(n_input, n_output) / (n_input) ** 0.5 Sigmoid와 같은 S자 함수의 경우 출력값들이 정규분포 형태이어야 안정적 학습 가능 Sigmoid function과 Xavier Init방법을 사용했을 경우 그래프 ReLU 계열 함수에는 적절하지 않음layer를 거쳐갈 수록 0에 수렴(converge) 가중치 초기화 4 He 초기화 방법(2015) 1w = np.random.randn(n_input, n_output) / (n_input / 2) ** 0.5 RELU + He init –&gt; 10 layer를 거쳐도 표준편차가 0으로 수렴하지 않음 Summary 가중치 초기화는 너무나 중요함 tanh의 경우 Xavier Init 방법이 효율적 ReLU계열 함수에는 He Init 방법이 효율적 최근엔 대부분 He Init를 주로 사용","link":"/2020/11/25/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%EA%B3%BC-%EC%A4%80%EB%B9%845/"},{"title":"백엔드개발_01","text":"이전 개발했던 코드 일부 미디 파일과 셋팅값을 넣으면 편곡된 미디파일 나오는 API 백엔드 코드from fastapi import FastAPI, Request, Depends, WebSocketfrom fastapi.testclient import TestClientfrom fastapi.responses import JSONResponse, StreamingResponse, RedirectResponsefrom fastapi.encoders import jsonable_encoderfrom fastapi.templating import Jinja2Templatesfrom Schema import MusainReqFormfrom fastapi.staticfiles import StaticFilesimport uvicornimport shutilimport timeimport jsonimport requestsimport asyncioimport osimport musainimport base64app = FastAPI()app.mount('/static', StaticFiles(directory='./static'), name='static')templates = Jinja2Templates(directory=&quot;templates&quot;)baseFolder = './static'CONFIG = {&quot;temperature&quot;: 1.0, &quot;model_size&quot;: 4, &quot;tempo&quot;: 100, &quot;percent&quot;: 100, &quot;bars_per_step&quot;: 2, &quot;tracks_per_step&quot;: 1, &quot;shuffle&quot; : 1, &quot;instrument_N&quot; : &quot;[0 3 5 7 9]&quot;, &quot;canGenerate&quot; : &quot;[0 1 1 1 1]&quot;, &quot;n_tracks&quot; : 5}@app.on_event(&quot;startup&quot;) # 초기 파일 지움.async def on_app_start(): try: await os.remove(f'{baseFolder}/input.mid') except Exception as e: pass #await fastapi_plugins.redis_plugin.init()@app.post(&quot;/musain_demo_upload&quot;)async def create_file(request: Request, form_data: MusainReqForm = Depends(MusainReqForm.as_form)): # print(request) #print(form_data) CONFIG['temperature'] = form_data.temperature CONFIG['model_size'] = form_data.model_size CONFIG['tempo'] = form_data.tempo CONFIG['percent'] = form_data.percentage CONFIG['bars_per_step'] = form_data.bars_per_step CONFIG['shuffle'] = form_data.shuffle CONFIG['instrument_N'] = form_data.instrument CONFIG['canGenerate'] = form_data.canGenerate CONFIG['n_tracks'] = form_data.n_tracks CONFIG['task_name'] = form_data.arrangementID CONFIG['addr'] = form_data.url tmp_file = form_data.file with open(f&quot;{baseFolder}/input.mid&quot;, &quot;wb&quot;) as buffer: shutil.copyfileobj(tmp_file.file, buffer) jsondata_result = jsonable_encoder(form_data) return JSONResponse(content=jsondata_result)@app.middleware(&quot;http&quot;)async def after_response(request: Request, call_next): loop = asyncio.get_event_loop() #print(f'1: {request.client.host}') #print(f'2: {request.url.scheme}') #print(f'3: {request.url.path}') response = await call_next(request) if request.url.path == '/musain_demo_upload': loop.create_task(doing_something(response)) return response else: return responseasync def doing_something(response): if response: print('Action after response ... ') return StreamingResponse(arrange_resp()) #os.system('curl -L 0.0.0.0:7000/musain_ai')def read_track_map(): with open(&quot;track_map.json&quot;, &quot;r&quot;) as f: return json.load(f)def write_track_map(x): with open(&quot;track_map.json&quot;, &quot;w&quot;) as f: json.dump(x, f)def get_current_midi(): with open(&quot;current_midi.json&quot;, &quot;r&quot;) as f: return json.load(f)def save_current_midi(midi_json): with open(&quot;current_midi.json&quot;, &quot;w&quot;) as f: json.dump(midi_json, f)def save_status(status): with open(&quot;current_status.json&quot;, &quot;w&quot;) as f: json.dump(status, f)def update_gui_midi(midi_json): assert isinstance(midi_json, dict) # execute_js('''build_from_midi(JSON.parse('{}'))'''.format(json.dumps(midi_json))) eval_js('build_from_midi(json.dumps(midi_json))')def show_track(piece, i): print(&quot;=&quot; * 30) for bar in piece[&quot;tracks&quot;][i][&quot;bars&quot;]: for event in bar.get(&quot;events&quot;, []): print(piece[&quot;events&quot;][event]) print(&quot;=&quot; * 30)def generate_callback(status): try: with open('status.txt', 'w') as f: f.write(str(status)) except Exception as e: print(e) #status = json.load(status) midi_json = get_current_midi() midi_json[&quot;resolution&quot;] = midi_json.get(&quot;resolution&quot;, 12) midi_json[&quot;tempo&quot;] = status['tempo'] status[&quot;temperature&quot;] = float(status[&quot;temperature&quot;]) print(f'TEMP : {status[&quot;temperature&quot;]}') ordered_midi_json_tracks = [] track_gui_map = {} num_bars = len(status[&quot;tracks&quot;][0][&quot;selected_bars&quot;]) # print(num_bars) num_tracks = len(midi_json.get(&quot;tracks&quot;, [])) for i, track in enumerate(status[&quot;tracks&quot;]): if track[&quot;track_id&quot;] &lt; num_tracks: midi_track = midi_json[&quot;tracks&quot;][track[&quot;track_id&quot;]] else: midi_track = {} midi_track[&quot;trackType&quot;] = track[&quot;track_type&quot;] midi_track[&quot;bars&quot;] = [{&quot;events&quot;: [], &quot;internalBeatLength&quot;: 4, &quot;tsNumerator&quot;: 4, &quot;tsDenominator&quot;: 4, } for _ in range(num_bars)] # override instrument via status midi_track[&quot;instrument&quot;] = track[&quot;instrument_num&quot;] midi_track[&quot;trackType&quot;] = track[&quot;track_type&quot;] ordered_midi_json_tracks.append(midi_track) track_gui_map[i] = track[&quot;track_id&quot;] track[&quot;track_id&quot;] = i midi_json[&quot;tracks&quot;] = ordered_midi_json_tracks # format param param = { &quot;tracks_per_step&quot;: status.pop(&quot;tracks_per_step&quot;), &quot;bars_per_step&quot;: status.pop(&quot;bars_per_step&quot;), &quot;model_dim&quot;: status.pop(&quot;model_dim&quot;), &quot;percentage&quot;: status.pop(&quot;percentage&quot;), &quot;batch_size&quot;: 1, &quot;temperature&quot;: status.pop(&quot;temperature&quot;), &quot;max_steps&quot;: 0, &quot;polyphony_hard_limit&quot;: 6, &quot;shuffle&quot;: status.pop(&quot;shuffle&quot;), &quot;verbose&quot;: False, &quot;ckpt&quot;: &quot;./model.pt&quot;, } # format status valid_status = {&quot;tracks&quot;: []} for track in status.get(&quot;tracks&quot;, []): track.pop(&quot;mute&quot;) track.pop(&quot;solo&quot;) track.pop(&quot;instrument_num&quot;) track[&quot;autoregressive&quot;] = track.pop(&quot;resample&quot;) valid_status[&quot;tracks&quot;].append(track) # run generate #self.show_track(midi_json, 0) piece = json.dumps(midi_json) status = json.dumps(valid_status) param = json.dumps(param) midi_str = musain.sample_multi_step(piece, status, param) # ??????? #self.show_track(json.loads(midi_str), 0) # get density for tracks midi_str = musain.update_note_density(midi_str) midi_str = musain.update_av_polyphony_and_note_duration(midi_str) midi_json = json.loads(midi_str) # make sure each bar has events for track in midi_json[&quot;tracks&quot;]: for bar in track[&quot;bars&quot;]: bar[&quot;events&quot;] = bar.get(&quot;events&quot;, []) midi_json[&quot;events&quot;] = midi_json.get(&quot;events&quot;, []) # normalize volume (works in place) mix_tracks_in_json(midi_json) # update the midi update_gui_midi(midi_json) # save the midi save_current_midi(midi_json)# this should work now basicallydef mix_tracks_in_json(midi_json, levels=None): AUDIO_LEVELS = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120] for track_num, track in enumerate(midi_json.get(&quot;tracks&quot;, [])): for bar in track.get(&quot;bars&quot;, []): for event_index in bar.get(&quot;events&quot;, []): event = midi_json[&quot;events&quot;][event_index] if event[&quot;velocity&quot;] &gt; 0: audio_level = AUDIO_LEVELS[8] if levels is not None: audio_level = AUDIO_LEVELS[levels[track_num]] event[&quot;velocity&quot;] = audio_leveldef play_callback(status): midi_json = get_current_midi() tracks = [] for track in status[&quot;tracks&quot;]: tid = int(track[&quot;track_id&quot;]) if track[&quot;solo&quot;]: tracks = [tid] break elif not track[&quot;mute&quot;]: tracks.append(tid) encoder = musain.TrackDensityEncoder() midi_json[&quot;tempo&quot;] = status[&quot;tempo&quot;] # mix_tracks_in_json(midi_json) raw = json.dumps(midi_json) bars_to_keep = list(range(status[&quot;nbars&quot;])) raw = musain.prune_tracks(raw, tracks, bars_to_keep) encoder.json_to_midi(raw, &quot;current.mid&quot;)def add_midi_callback(status, raw): data = raw # re.search(r&quot;base64,(.*)&quot;, raw).group(1) with open(f&quot;{baseFolder}/input.mid&quot;, &quot;wb&quot;) as f: f.write(base64.b64decode(data)) enc = musain.TrackDensityEncoder() midi_json = json.loads(enc.midi_to_json(f&quot;{baseFolder}/input.mid&quot;)) bars_to_keep = list(range(len(midi_json[&quot;tracks&quot;][0][&quot;bars&quot;]))) midi_json = json.loads( musain.prune_empty_tracks(json.dumps(midi_json), bars_to_keep) ) # add new midi to what we already have cur_midi_json = get_current_midi() if len(cur_midi_json) and len(status.get(&quot;tracks&quot;, [])): valid_tracks = [] for track in status.get(&quot;tracks&quot;, []): valid_tracks.append(cur_midi_json[&quot;tracks&quot;][track[&quot;track_id&quot;]]) cur_midi_json[&quot;tracks&quot;] = valid_tracks bars_to_keep = list(range(len(cur_midi_json[&quot;tracks&quot;][0][&quot;bars&quot;]))) cur_midi_json = json.loads( musain.prune_empty_tracks(json.dumps(cur_midi_json), bars_to_keep) ) midi_json = json.loads( musain.append_piece(json.dumps(cur_midi_json), json.dumps(midi_json)) ) if len(midi_json.get(&quot;tracks&quot;, [])) == 0: eval_js( 'build_snackbar(&quot;Invalid MIDI file. Make sure each track has atleast 8 bars.&quot;)') return if &quot;tempo&quot; not in midi_json: midi_json[&quot;tempo&quot;] = 160 # get density for tracks midi_str = json.dumps(midi_json) midi_str = musain.update_note_density(midi_str) midi_str = musain.update_av_polyphony_and_note_duration(midi_str) midi_json = json.loads(midi_str) # normalize volume (works in place) mix_tracks_in_json(midi_json) # update the midi update_gui_midi(midi_json) # save the midi save_current_midi(midi_json)def sync_file(): if os.path.isfile(f'{baseFolder}/input.mid'): with open(f'{baseFolder}/input.mid', 'rb') as f: print(f'파일 로드, {f}') return base64.b64encode(f.read())def check_midi_json(status): print(type(status)) print(status) print('---' * 10) print(status['tracks']) if len(status['tracks']) == 0 or status['canGenerate'] == 'false': print('No midi tracks') eval_js('build_snackbar(&quot;Must add tracks before you can generate.&quot;)') else: return status #self.generate_callback(status)def reset_midi(): save_current_midi({})def make_midi_data(): while True: (CONFIG, ROUTE_MUSAIN_SERVER) = (yield) print(f'INIT CONFIG:: {CONFIG}') with open(f'CONFIG_{CONFIG[&quot;task_name&quot;]}.txt', 'w') as fd: fd.write(str(json.dumps(CONFIG))) CONFIG['canGenerate'] = CONFIG['canGenerate'][1:-1].split(' ') CONFIG['instrument_N'] = CONFIG['instrument_N'][1:-1].split(' ') CONFIG_1 = json.dumps(CONFIG, ensure_ascii=False) CONFIG_2 = json.loads(CONFIG_1) print(f'config loaded :: {CONFIG_2}') reset_midi() eval_js('init_reset()') if os.path.isfile(f'{baseFolder}/input.mid') and ROUTE_MUSAIN_SERVER and CONFIG_2: print('ai ready !!!') print('file 있음') raw_files = sync_file() status = eval_js('get_status()') add_midi_callback(status, raw_files) time.sleep(3) print(f&quot;started at {time.strftime('%X')}&quot;) eval_js(f'follow_server_config({CONFIG_2})') status_new = eval_js('get_status()') print(type(status_new)) print(f'run at {time.strftime(&quot;%X&quot;)}============') generate_callback(status_new) print(f&quot;running at {time.strftime('%X')}&quot;) midi_json = get_current_midi() enc = musain.TrackDensityEncoder() enc.json_to_midi(json.dumps(midi_json), f&quot;{CONFIG['task_name']}.mid&quot;) print(f'미디파일 생성 완료 {time.strftime(&quot;%X&quot;)}') # ---------- print(f&quot;전송 상대 IP주소: at {ROUTE_MUSAIN_SERVER}&quot;) if ROUTE_MUSAIN_SERVER and os.path.isfile(f&quot;{CONFIG['task_name']}.mid&quot;) and midi_json and status_new: print('made midi file %s ' % f&quot;{CONFIG['task_name']}.mid&quot;) print(f'musain finished={time.strftime(&quot;%X&quot;)}===============================================================') # os.system(f'curl -F file=@&quot;{CONFIG[&quot;task_name&quot;]}.mid&quot; https://www.vucoms.co.kr:8200/ai_arrangement') # r = requests.post(f'{dest}', files={'file': open(f'{CONFIG['task_name']}.mid', 'rb')}) #r = requests.post('https://www.vucoms.co.kr:8200/ai_arrangement', files={'file': open(f'{CONFIG[&quot;task_name&quot;]}.mid', 'rb')}) #print('result: ', r) return 1async def arrange_resp(): print('arrange??') if os.path.isfile(f'{baseFolder}/input.mid'): print('AI init...') print(f'dest -&gt; {CONFIG[&quot;addr&quot;]}') print('received conf: ', CONFIG) midi_make = make_midi_data() # whiel True일때 yield from ... next(midi_make) try: result = midi_make.send((CONFIG, CONFIG['addr'])) except StopIteration as exec: result = exec.value if result == 1: yield 'exec finished' print('wwww') midi_make.close()# !!!!@app.websocket(&quot;/ws&quot;)async def eval_js(websocket: WebSocket, json_data): await websocket.accept() while True: try: await websocket.send_json(json_data) recv = await websocket.receive_json() result = recv.get('data', None) print(result) return result except Exception as e: print(e) break@app.get(&quot;/musain_demo_view&quot;)def read_root(request: Request): return templates.TemplateResponse(&quot;demo2.html&quot;, {&quot;request&quot;: request, &quot;reset_midi&quot;: reset_midi, &quot;generate_callback&quot;: generate_callback})if __name__ == &quot;__main__&quot;: uvicorn.run(app=&quot;musain_demo:app&quot;, host=&quot;0.0.0.0&quot;, port=7000, reload=True, workers=4)","link":"/2023/01/03/%EB%B0%B1%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C-01/"},{"title":"딥러닝-입문하기-8","text":"오디오 딥러닝 해보기Reference Digital Signal Processing Lecture https://github.com/spatialaudio/digital-signal-processing-lecture Python for Signal Processing (unipingco) https://github.com/unpingco/Python-for-Signal-Processing Audio for Deep Learning (남기현님) https://tykimos.github.io/2019/07/04/ISS_2nd_Deep_Learning_Conference_All_Together/ 오디오 전처리 작업을 위한 연습 (박수철님) https://github.com/scpark20/audio-preprocessing-practice Musical Applications of Machine Learning https://mac.kaist.ac.kr/~juhan/gct634/ Awesome audio study materials for Korean (최근우님) https://github.com/keunwoochoi/awesome-audio-study-materials-for-korean T Academy(출처) https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=178 1. Digital Signal Processing소리 signal를 어떠한 데이터 타입으로 표현하며, 소리와 관련된 task를 해결하는데 있습니다. 그렇다면 소리는 어떠한 데이터를 가지고 있을까요? Sound?소리는 일반적으로 진동으로 인한 공기의 압축으로 생성됩니다. 그렇다면 압축이 얼마나 됬느냐에 따라서 표현되것이 바로 Wave(파동)인데요. 파동은 진동하며 공간/매질을 전파해 나가는 현상입니다. 질량의 이동은 없지만 에너지/운동량의 운반은 존재합니다. Wave에서 저희가 얻을수 있는 정보는 크게 3가지가 있습니다. Phase(Degress of displacement) : 위상 Amplitude(Intensity) : 진폭 Frequency : 주파수 Sampling샘플링은 무엇일까요?? 아날로그 정보를 잘게 쪼개서 discrete한 디지털 정보로 표현해야합니다. 우리는 무한하게 쪼개서 저장할수 없으니, 어떤 기준을 가지고 아날로그 정보를 쪼개서 대표값을 취하게 됩니다. Convert into a sqeuence of binary values via Sampling and Quantization 1.1. Time domain시간을 기준으로 아날로그 시그널을 쪼개게 되는 것을 의미합니다. Sampling을 통하여 컴퓨터는 소리 sequence를 binary value로 받아드리게 됩니다. Sampling rate : 얼마나 잘게 쪼갤 것인가?잘개 쪼갤수록 원본 데이터와 거이 가까워지기 떄문에 좋지만 Data의 양이 증가하게 됩니다. 만약 너무 크게 쪼개게 된다면, 원본 데이터로 reconstruct하기 힘들어 질 것입니다. Sampling theorem샘플링 레이트가 최대 frequency의 2배 보다 커져야 한다는 것입니다.\\( f_{s} &gt; 2f_{m} \\) 여기서 \\(f_{s}\\)는 sampling rate, 그리고 \\(f_{m}\\)은 maximum frequency를 말합니다. Nyqusit frequency = \\(f_{s}/2\\), sampling rate의 절반입니다. 일반적으로 Sampling은 인간의 청각 영역에 맞게 형성이 됩니다. Audio CD : 44.1 kHz(44100 sample/second) Speech communication : 8 kHz(8000 sample/second) 12345# library loadimport soundfile as sfimport librosaimport numpy as npimport matplotlib.pyplot as plt 1filename = &quot;./wav/voice.wav&quot; 12345678# 파일 로드 방법 1y, sr = sf.read(filename, dtype='int16')print(&quot;Sample Rate: &quot;, sr)print(&quot;DATA: &quot;, type(y), y.shape, len(y), y)dur = len(y) / srprint(&quot;dur : &quot;, dur) Sample Rate: 16000 DATA: &lt;class 'numpy.ndarray'&gt; (48944,) 48944 [ -9 1 -5 ... -20 -16 -24] dur : 3.059 1234567# 파일 로드 방법 2y, sr = librosa.load(filename, mono=True, sr=16000)print(&quot;Sample Rate: &quot;, sr)print(&quot;DATA: &quot;, type(y), y.shape, y)dur = len(y) / srprint(&quot;dur : &quot;, dur) Sample Rate: 16000 DATA: &lt;class 'numpy.ndarray'&gt; (48944,) [-2.7465820e-04 3.0517578e-05 -1.5258789e-04 ... -6.1035156e-04 -4.8828125e-04 -7.3242188e-04] dur : 3.059 Resampling샘플링된 데이터를 다시금 더 높은 sampling rate 혹은 더 낮은 sampling rate로 다시 샘플링할수 있습니다. 이때는 일반적으로 interpolation(보간)을 할때는 low-pass filter를 사용합니다.(Windowed sinc function) 12import IPython.display as ipdy_8k = librosa.resample(y, sr, 8000) 1ipd.Audio(y_8k, rate=8000) 1len(y_8k) 24472 12# durationlen(y_8k)/8000 3.059 12y_2k = librosa.resample(y, sr, 4000)ipd.Audio(y_2k, rate=2000) 1len(y_2k) 12236 Nomalization &amp; Quantization시간의 기준이 아닌 실제 amplitude의 real valued 를 기준으로 시그널의 값을 조절합니다. Amplitude를 이산적인 구간으로 나누고, signal 데이터의 Amplitude를 반올림하게 됩니다. 그렇다면 이산적인 구간은 어떻게 나눌수 있을까요?, bit의 비트에 의해서 결정됩니다. B bit의 Quantization : \\(-2^{B-1}\\) ~ \\(2^{B-1}-1\\) Audio CD의 Quantization (16 bits) : \\(-2^{15}\\) ~ \\(2^{15}-1\\) 위 값들은 보통 -1.0 ~ 1.0 영역으로 scaling되기도 합니다. 123# Normalizenormed_wav = y / max(np.abs(y))ipd.Audio(normed_wav, rate=sr) 12345678#quantization 하면 음질은 떨어지지만 light한 자료형이 된다.Bit = 8max_value = 2 ** (Bit-1)quantized_8_wav = normed_wav * max_valuequantized_8_wav = np.round(quantized_8_wav).astype(int)quantized_8_wav = np.clip(quantized_8_wav, -max_value, max_value-1)ipd.Audio(quantized_8_wav, rate=sr) mu-law encoding사람의 귀는 소리의 amplitude에 대해 log적으로 반응합니다. 즉, 작은소리의 차이는 잘잡아내는데 반해 소리가 커질수록 그 차이를 잘 느끼지 못합니다. 이러한 특성을 wave값을 표현하는데 반영해서 작은값에는 높은 분별력(high resolution)을, 큰값끼리는 낮은 분별력(low resolution)을 갖도록 합니다 12def mu_law(x, mu=255): return np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu) 1234567x = np.linspace(-1, 1, 1000)x_mu = mu_law(x)plt.figure(figsize=[6, 4])plt.plot(x)plt.plot(x_mu)plt.show() 12wav_mulaw = mu_law(normed_wav)ipd.Audio(wav_mulaw, rate=sr) to be continued…뒷장에서 계속됩니다.","link":"/2020/12/03/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%ED%95%98%EA%B8%B0-8/"},{"title":"어나더Dacon도전기_2","text":"데이콘 또다른 대회 후기 - 데이콘 어나더🌠🌠 Regression, CNN, LSTM 모델의 iteration epoch 횟수를 너무 많이 늘리면 Overfitting이 날 수 있으니 LR 스케줄러 등 다양한 방법을 시도해봐야 한다. CNN-LSTM 다변량 회귀 모델링 후기🌠 처음에는 왜 이렇게 loss가 줄지 않는지 🎚 의문이 들었다.🌠 quantile 로 계산해야 할 경우는 quantile 1.0을 구한뒤에 0.1 ~ 1.0 을 적용하면 된다. 이렇게 되면 8:45 가 되버림 : 잘못된 예시 quantile 적용의 안좋은 예시. 시계열 문제는 시간, 구간당 평균이나 여러 통계적 변수를 만들어야 점수가 더 잘나오는 특징이 있다.⏩ 그걸 해결하기 위해서는 prophet 사용하면 그나마 해결이 잘 된다. 참고문서1 역시나 예측이 맞았다. Epoch을 약간(?) 겁나게 늘리고 optimizer나 다른 학습율 스케줄러, sgd에 decay, momentum 을 주어야 하나보다. 다변량 회귀이기 때문에 validation loss 계산이 약간 신중해야 정확한 loss값이 계산이 가능하다. test dataset에 element-wise 방식으로 계산되는거라 test dataset shape 그대로 predict가 출력된다. Reshape, Squeeze 를 써서 shape을 맞춰주어야 한다… element-wise 하게 계산되면 GG, window 된 shape을 확인 또 확인 해야함. Quantile Regression 문제는 그냥 Regression에 Quantile별로 값을 추출해야 하는 약간의(?) 난제가 존재한다. Pytorch는 🐍 하지만 어떤 면에서는 TF2.x 보다 더 까다로운 것 같다. 여러 프레임워크를 많이 써보자..","link":"/2020/12/23/%EC%96%B4%EB%82%98%EB%8D%94Dacon%EB%8F%84%EC%A0%84%EA%B8%B0-2/"},{"title":"딥러닝-입문하기-9","text":"지난번에 이어서 오디오 딥러닝 2번째2. Sound Representation위에서 Sampling된 discrete한 데이터를 이제 우리는 표현이 가능합니다. 그렇다면 어떤 요소를 기반으로 저희가 데이터를 표현해야할까요?, 첫번째는 시간의 흐름에 따라, 공기의 파동의 크기로 보는 Time-domain Representation 방법이 있습니다. 두번째는 시간에 따라서 frequency의 변화를 보는 Time-Frequency representation이 있습니다. 2.1. Time domain - WaveformWaveform의 경우에는 오디오의 자연적이 표현입니다. 시간이 x축으로 그리고 amplitude가 y축으로 표현이 됩니다. 1234import librosa.displayfig = plt.figure(figsize = (14,5))librosa.display.waveplot(y[0:10000], sr=sr) &lt;matplotlib.collections.PolyCollection at 0x7fa325708d50&gt; 정현파 (Sinusoid)모든 신호는 주파수(frequency)와 크기(magnitude), 위상(phase)이 다른 정현파(sinusolida signal)의 조합으로 나타낼 수 있다. 퓨리에 변환은 조합된 정현파의 합(하모니) 신호에서 그 신호를 구성하는 정현파들을 각각 분리해내는 방법입니다. 1234567sr = 16000 # sample rateT = 2.0 # secondst = np.linspace(0, T, int(T*sr), endpoint=False) # time variablex = 0.5*np.sin(2*np.pi*440*t) # pure sine wave at 440 Hz# y = 0.5*numpy.sin(2*numpy.pi*400*t)ipd.Audio(x, rate=sr) # load a NumPy array 1librosa.display.waveplot(x[:50], sr=sr) &lt;matplotlib.collections.PolyCollection at 0x7fa327a01550&gt; 푸리에 변환 (Fourier transform)푸리에 변환(Fourier transform)을 직관적으로 설명하면 푸리에 변환은 임의의 입력 신호를 다양한 주파수를 갖는 주기함수(복수 지수함수)들의 합으로 분해하여 표현하는 것 입니다. 그리고 각 주기함수들의 진폭을 구하는 과정을 퓨리에 변환이라고 합니다. 주기(period): 파동이 한번 진동하는데 걸리는 시간, 또는 그 길이, 일반적으로 sin함수의 주기는 \\(2\\pi /w\\)입니다 주파수(frequency): 1초동안의 진동횟수입니다. 퓨리에 변환의 식을 살펴봅시다. $$y(t)=\\sum_{k=-\\infty}^\\infty A_k , \\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)$$ 이 식을 하나식 해석해봅시다.\\(k\\)는 \\(-\\infty\\) ~ \\(\\infty\\)의 범위를 가지고 움직입니다.이것은 주기함수들의 갯수입니다. 어떠한 신호가 다른 주기함수들의 합으로 표현되는데, 그 주기함수는 무한대의 범위에 있군요. 그렇다면 \\(A_k\\)은 그 사인함수의 진폭이라고 합니다. 이 식은 시간에 대한 입력신호 \\(y_{t}\\)가 \\(\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)\\) 와 진폭(\\(A_k\\))의 선형결합으로 표현됨을 말하고 있군요. 위 그림을 본다면 조금 더 명확히 알수 있을 것 같습니다. 붉은색 라인이 입력신호 \\(y_{t}\\) 입니다. 일반적으로 우리가 다루게 되는 데이터인 음악이나 목소리 같은 데이터 역시 complex tone입니다. 여려개의 주파수영역이 합쳐진 것이죠. 이러한 여러개의 주파수 영역을 분리하자!가 주요한 아이디어입니다. 파란색 주기함수들을 보신다면 여러개의 주기함수들을 찾으실 수 있습니다. 그 주기함수들은 고유의 주파수(frequency)와 강도(amplitude)를 가지고 있고 그것이 파란색의 라인들로 표현되어 있습니다. 진폭에 대한 수식은 다음과 같습니다.$$A_k = \\frac{1}{T} \\int_{-\\frac{T}{2}}^\\frac{T}{2} f(t) , \\exp \\left( -i\\cdot 2\\pi \\frac{k}{T} t \\right) , dt$$여기서 하나의 의문점이 드실것 같습니다. 주기함수의 합으로 표현된다고 했는데 저희가 보고 있는것은 \\(\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)\\) 지수함수의 형태이기 때문입니다. 지수함수와 주기함수 사이의 연관관계는 무엇일까요? 그 관계를 찾은 것이 바로 오일러 공식입니다. $$e^{i\\theta} = \\cos{\\theta} + i\\sin{\\theta}$$ 이 식을 위 식처럼 표현한다면 다음과 같습니다$$\\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right) = \\cos\\left({2\\pi\\frac{k}{T}}\\right) + i\\sin\\left({2\\pi\\frac{k}{T}}\\right)$$ 여기서 \\(\\cos{2\\pi\\frac{k}{T}}\\), \\(i\\sin{2\\pi\\frac{k}{T}}\\) 함수는 주기와 주파수를 가지는 주기함수입니다. 즉 퓨리에 변환은 입력 singal이 어떤것인지 상관없이 sin, cos과 같은 주기함수들의 합으로 항상 분해 가능하다는 것입니다. Fourier Transform의 Orthogonal$$y(t)=\\sum_{k=-\\infty}^\\infty A_k , \\exp \\left( i\\cdot 2\\pi\\frac{k}{T} t \\right)$$ 어떠한 주기함수를 우리는 cos과 sin함수로 표현하게 되었습니다. 여기서 한가지 재밌는 점은, 이 함수들이 직교하는 함수(orthogonal)라는 점이다.$${ \\exp \\left(i\\cdot 2\\pi\\frac{k}{T} t\\right) } = orthogonal$$ 벡터의 직교는 해당 벡터를 통해 평면의 모든 좌표를 표현할수 있었다. 함수의 내적은 적분으로 표현할 수 있는데, 만약 구간 [a,b]에서 직교하는 함수는 구간 [a,b]의 모든 함수를 표현할수 있습니다. 위 케이스에서는 cos, sin 함수가 사실상 우리 입력신호에 대해서 기저가 되어주는 함수라고 생각할 수 있습니다. DFT (Discrete Fourier Transform)한가지 의문점이 듭니다. 바로, 우리가 sampling으로 들어온 데이터는 바로 시간의 간격에 따른 소리의 amplitude의 discrete한 데이터이기 때문이다. 그렇다면 위 푸리에 변환 식을 Discrete한 영역으로 생각해봅시다. 만약에 우리가 수집한 데이터 \\(y_{n}\\)에서, 이산 시계열 데이터가 주기 \\(N\\)으로 반복한다고 할때, DFT는 주파수와 진폭이 다른 \\(N\\)개의 사인 함수의 합으로 표현이 가능합니다.$$y_n = \\frac{1}{N} \\sum_{k=0}^{N-1} Y_k \\cdot \\exp \\left( i\\cdot 2\\pi\\frac{k}{N} n \\right)$$ 위 식을 보면 k의 range가 0부터 \\(N-1\\)로 변화했음을 알 수 있다. 이때 Spectrum \\(Y_{k}\\)를 원래의 시계열 데이터에 대한 퓨리에 변환값이라고 하죠. $$Y_k = \\sum_{n=0}^{N-1} y_n\\cdot \\exp \\left( -i\\cdot 2\\pi\\frac{k}{N} n \\right)$$ \\(y_{n}\\) : input signal \\(n\\) : Discrete time index \\(k\\) : discrete frequency index \\(Y_{k}\\) : k번째 frequeny에 대한 Spectrum의 값 123456789def DFT(x): N = len(x) X = np.array([]) nv = np.arange(N) for k in range(N): s = np.exp(1j*2*np.pi*k/N*nv) X = np.append(X, sum(x*np.conjugate(s))) return X STFT (Short-Time Fourier Transform)FFT는 시간에 흐름에 따라 신호의 수파수가 변했을때, 어느 시간대에 주파수가 변하는지 모르게 됩니다. 이러한 한계를 극복하기 위해서, STFT는 시간의 길이를 나눠서 이제 퓨리에 변환을 하게 됩니다. 즉 FFT를 했을때는 Time domina에 대한 정보가 날아가게 되는 것이죠. 주파수의 특성이 시간에 따라 달라지는 사운드를 분석하는 방법입니다. 일반적으로 우리가 사용하는 signal 데이터에 적합하다. 시계열 데이터를 일정한 시간 구간 (window size)로 나누고, 각 구간에 대해서 스펙트럼을 구하는 데이터이다. 이는 Time-frequency 2차원 데이터로 표현이 됩니다. $$X(l,k) = \\sum_{n=0}^{N-1} w(n) x(n+lH)\\exp^{\\frac{-2\\pi k n}{N}}$$ \\(N\\) : FFT size Window를 얼마나 많은 주파수 밴드로 나누는가 입니다. Duration 샘플링 레이트를 window로 나눈 값입니다. $$T= window/SR$$ T(Window) = 5T(Signal), duration은 신호주기보다 5배 이상 길게 잡아야한다. 440Hz 신호의 window size는 5*(1/440)이 됩니다. \\(w(n)\\) : Window function 일반적으로 Hann window가 쓰입니다. \\(n\\) : Window size Window 함수에 들어가는 Sample의 양입니다. 작을수록 Low-frequency resolution을 가지게 되고, high-time resolution을 가집니다. 길수록 High-frequency, low time resolution을 가집니다. \\(H\\) : Hop size 윈도우가 겹치는 사이즈입니다. 일반적으로는 1/4정도를 겹치게 합니다. STFT의 결과는 즉 시간의 흐름(Window)에 따른 Frequency영역별 Amplitude를 반환합니다. 1234567sr = 16000 # sample rateT = 2.0 # secondst = np.linspace(0, T, int(T * sr), endpoint=False) # time variablex = 0.5 * np.sin(2 * np.pi * 440 * t) # pure sine wave at 440 Hz# y = 0.5*numpy.sin(2*numpy.pi*400*t)ipd.Audio(x, rate=sr) # load a NumPy array 12345678910111213141516print(len(y))D = librosa.stft(y)print(D.shape, D)# phase 에 대한 정보를 날린다.D_mag = np.abs(D)print(D_mag)print(D_mag.shape)magnitude, phase = librosa.magphase(D)print(magnitude)print(magnitude.shape)print(magnitude-D_mag) 48944 (1025, 96) [[-2.1494275e-01+0.0000000e+00j -2.0992082e-01+0.0000000e+00j -2.0418610e-01+0.0000000e+00j ... -1.9438802e-01+0.0000000e+00j -1.9518623e-01+0.0000000e+00j -2.3163199e-01+0.0000000e+00j] [ 9.3493842e-02+6.7762636e-21j 1.2481287e-01+4.8880498e-03j 7.3961377e-02+1.3274251e-03j ... 7.7925511e-02-1.7781712e-02j 9.6285135e-02+1.7115690e-02j 1.1564651e-01-5.2810002e-02j] [ 1.9829417e-02+8.2818238e-19j -3.1706840e-02+1.5587136e-02j 5.7078212e-02-2.0519590e-02j ... 2.3265863e-02+7.6752454e-02j 3.0044108e-03-6.0352467e-02j 5.4616658e-03+6.8522707e-02j] ... [-5.3125373e-03-1.2618632e-18j 3.4157380e-03-1.7295172e-03j -1.8859134e-03-3.5993013e-04j ... -7.6227036e-04-9.3025468e-05j -1.8814437e-04-8.4138475e-05j 4.7763987e-04-5.3400453e-04j] [ 2.1248308e-03+1.5585406e-19j -1.4035926e-03+8.0862024e-05j 2.4144542e-03+3.4830419e-04j ... -2.3595782e-04+1.1687888e-03j 1.1331354e-04+1.2911476e-04j 2.8909228e-04+3.3650018e-04j] [-8.1756472e-04+0.0000000e+00j -9.3529455e-04+0.0000000e+00j -1.4104146e-03+0.0000000e+00j ... 1.3452002e-03+0.0000000e+00j -9.2299597e-06+0.0000000e+00j -4.9439305e-04+0.0000000e+00j]] [[2.1494275e-01 2.0992082e-01 2.0418610e-01 ... 1.9438802e-01 1.9518623e-01 2.3163199e-01] [9.3493842e-02 1.2490856e-01 7.3973291e-02 ... 7.9928555e-02 9.7794548e-02 1.2713383e-01] [1.9829417e-02 3.5331041e-02 6.0654562e-02 ... 8.0201246e-02 6.0427204e-02 6.8740025e-02] ... [5.3125373e-03 3.8286415e-03 1.9199529e-03 ... 7.6792570e-04 2.0610093e-04 7.1645004e-04] [2.1248308e-03 1.4059199e-03 2.4394479e-03 ... 1.1923688e-03 1.7178644e-04 4.4362905e-04] [8.1756472e-04 9.3529455e-04 1.4104146e-03 ... 1.3452002e-03 9.2299597e-06 4.9439305e-04]] (1025, 96) [[2.1494275e-01 2.0992082e-01 2.0418610e-01 ... 1.9438802e-01 1.9518623e-01 2.3163199e-01] [9.3493842e-02 1.2490856e-01 7.3973291e-02 ... 7.9928555e-02 9.7794548e-02 1.2713383e-01] [1.9829417e-02 3.5331041e-02 6.0654562e-02 ... 8.0201246e-02 6.0427204e-02 6.8740025e-02] ... [5.3125373e-03 3.8286415e-03 1.9199529e-03 ... 7.6792570e-04 2.0610093e-04 7.1645004e-04] [2.1248308e-03 1.4059199e-03 2.4394479e-03 ... 1.1923688e-03 1.7178644e-04 4.4362905e-04] [8.1756472e-04 9.3529455e-04 1.4104146e-03 ... 1.3452002e-03 9.2299597e-06 4.9439305e-04]] (1025, 96) [[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] ... [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]] 123456S = librosa.core.stft(audio_np, n_fft=1024, hop_length=512, win_length=1024)D = np.abs(S)**2log_S = librosa.power_to_db(S, ref=np.max) #소리의 단위를 db로 바꿈 plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=16000, x_axis='time') Window function?위에서 Window function과 Window size라는 이야기가 나오고 있습니다. 윈도우 Function과 Size는 왜 쓰는 것이며 어떨때 쓰는 것일까요? Window function의 주된 기능은 main-lobe의 width와 side-lobe의 레벨의 Trade-off 를 제어해 준다는 장점이 있습니다. 그리고 깁스 현상을 막아주는 고마운 친구이기도 하죠. 지금나온 main-lobe, side-bloe, 깁스현상은 무엇일까요? 123456789101112def frame_audio(audio, FFT_size=1024, hop_size=20, sample_rate = 22050): audio = np.pad(audio, int(FFT_size/2), mode='reflect') frame_len = np.round(sample_rate*hop_size / 1000).astype(int) frame_num = int((len(audio) - FFT_size) / frame_len) + 1 frames = np.zeros((frame_num, FFT_size)) for n in range(frame_num): frames[n] = audio[n*frame_len:n*frame_len+FFT_size] return framesaudio_framed = frame_audio(audio_np)print(&quot;Framed audio shape: {}&quot;.format(audio_framed.shape)) Framed audio shape: (469, 1024) 123456789101112131415161718from scipy import signalwindow = signal.get_window(&quot;hann&quot;, 1024, fftbins=True)audio_win = audio_framed * windowind = 2plt.figure(figsize=(15,6))plt.subplot(3,1,1)plt.plot(window)plt.grid(True)plt.subplot(3,1,2)plt.plot(audio_framed[ind])plt.grid(True)plt.subplot(3,1,3)plt.plot(audio_win[ind])plt.grid(True)plt.show() 플롯을 보게 된다면 windowing을 적용하기전 plot은 끝부분이 다 다르지만, windowing을 지나고 나서 나오는 plot은 끝이 0 으로 일치한다는 특성을 볼 수 있습니다. Window size?윈도우 사이즈는 일반적으로 time과 frequency의 resolutions을 제어해 줍니다. short-window : 낮은 frequency resolution, 높은 time-resolution을 가지게 됩니다. Long-window : 높은 frequency resolution을 가지며, 낮은 time-resolution을 가지게 됩니다. SpectrogramSpectrogram을 추출하는 방법을 고민해봅시다.일반적으로 프로세스는 입력신호에 대해서 window function을 통과하여 window size만큼 sampling 된 data를 받아서 Discrete Fourier Transform을 거치게 됩니다. DFT를 거친 신호들은 Frequency와 Amplitude의 영역을 가지는 Spectrum이 됩니다. 이후 이를 90도로 회전시켜서, time domain으로 stack하게 됩니다. Spectrogram은 Frequency Scale에 대해서 Scaling이 이루어집니다. 주파수 영역에 Scaling을 하는 이유는, 인간의 주파수를 인식하는 방식과 연관이 있습니다. 일반적으로 사람은, 인접한 주파수를 크게 구별하지 못합니다. 그 이유는 우리의 인지기관이 categorical한 구분을 하기 때문입니다. 때문에 우리는 주파수들의 Bin의 그룹을 만들고 이들을 합하는 방식으로, 주파수 영역에서 얼마만큼의 에너지가 있는지를 찾아볼 것입니다. 일반적으로는 인간이 적은 주파수에 더 풍부한 정보를 사용하기때문에, 주파수가 올라갈수록 필터의 폭이 높아지면서 고주파는 거의 고려를 안하게 됩니다. 따라서 아래 frequency scale은 어떤 방식을 통해 저주파수대 영역을 고려할 것이가에 대한 고민이 남아 있습니다. Linear frequency scale일반적으로 single tone(순음)들의 배음 구조를 파악하기 좋습니다. 하지만 분포가 저주파수 영역에 기울어져(skewed) 있습니다. Mel Scale멜 스펙트럼은 주파수 단위를 다음 공식에 따라 멜 단위로 바꾼 것을 의미합니다. $$m = 2595 \\log_{10}\\left(1 + \\frac{f}{700}\\right)$$일반적으로는 mel-scaled bin을 FFT size보다 조금더 작게 만드는게 일반적입니다. 1234# STFTS = librosa.core.stft(audio_np, n_fft=1024, hop_length=512, win_length=1024)# phase 에 대한 정보를 날린다.D = np.abs(S)**2 1234# mel spectrogram (512 --&gt; 40)mel_basis = librosa.filters.mel(sr, 1024, n_mels=40)mel_S = np.dot(mel_basis, D)mel_S.shape (40, 404) 123456789import librosa.displayS = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 128)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() 123456789import librosa.displayS = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 256)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() Bark scale귀가 인식하는 주파수의 영역은 대략 20Hz~2000Hz 로 가정합니다. 하지만 주파수에 대한 사람의 인식은 비선형적입니다. 귀와 뇌의 가청대역을 24개의 대역으로 나눈것을 Bark라고 합니다! Bark scale은 500Hz이하에서는 100Hz의 대역폭을 가지며, 500Hz 이상에서는 각 대역의 중심수파수의 대략 20%에 해당하는 대역폭을 가지게 됩니다. 20, 100, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720, 2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500 ( Hz ) Log compression\\(10 * log10(\\frac{S}{ref})\\)의 단위로 신호를 스케일링 합니다. 이는 spectrogram을 데시벨 유닛으로 전환해 줍니다. 123#log compressionlog_mel_S = librosa.power_to_db(mel_S)log_mel_S.shape (40, 404) Discrete cosine transform (DCT)DCT는 n개의 데이터를 n개의 코사인 함수의 합으로 표현하여 데이터의 양을 줄이는 방식입니다. 저 주파수에 에너지가 집중되고 고 주파수 영역에 에너지가 감소합니다. Filter Bank는 모두 Overlapping 되어 있기 때문에 Filter Bank 에너지들 사이에 상관관계가 존재하기 때문이다. DCT는 에너지들 사이에 이러한 상관관계를 분리 해주는 역활을 해줍니다. 하지만 여기서 26개 DCT Coefficient 들 중 12만 남겨야 하는데, 그 이유는 DCT Coefficient 가 많으면, Filter Bank 에너지의 빠른 변화를 나타내게 되고, 이것은 음성인식의 성능을 낮추게 됩니다. 12345# mfcc (DCT)mfcc = librosa.feature.mfcc(S=log_mel_S, n_mfcc=13)mfcc = mfcc.astype(np.float32) # to save the memory (64 to 32 bits)plt.figure(figsize=(12,4))librosa.display.specshow(mfcc) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3a8975cc88&gt; 1234567891011mfcc = librosa.feature.mfcc(S=log_S, n_mfcc=13)delta2_mfcc = librosa.feature.delta(mfcc, order=2)print(delta2_mfcc.shape)plt.figure(figsize=(12,4))librosa.display.specshow(delta2_mfcc)plt.ylabel('MFCC coeffs')plt.xlabel('Time')plt.title('MFCC')plt.colorbar()plt.tight_layout() (13, 148) 12345678def change_pitch(data, sr): y_pitch = data.copy() bins_per_octave = 12 pitch_pm = 2 pitch_change = pitch_pm * 2 * (np.random.uniform()) y_pitch = librosa.effects.pitch_shift(y_pitch.astype('float64'), sr, n_steps=pitch_change, bins_per_octave=bins_per_octave) return y_pitch 123456def waveform_aug(waveform,sr): y = change_pitch(waveform, sr) fig = plt.figure(figsize = (14,5)) librosa.display.waveplot(y, sr=sr) ipd.display(ipd.Audio(data=y, rate=sr)) return y, sr 12ipd.display(ipd.Audio(data=audio_np, rate=sr))y, sr = waveform_aug(audio_np, 16000) 1234567S = librosa.feature.melspectrogram(audio_np, sr=sr, n_mels = 128)log_S = librosa.power_to_db(S, ref=np.max)plt.figure(figsize=(12,4))librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')plt.title('Mel power sepctrogram')plt.colorbar(format='%+02.0f dB')plt.tight_layout() 1np.random.uniform(low=1.5, high=3) 2.6892527992385458 12345def value_aug(data): y_aug = data.copy() dyn_change = np.random.uniform(low=1.5, high=3) y_aug = y_aug * dyn_change return y_aug 1234def add_noise(data): noise = np.random.randn(len(data)) data_noise = data + 0.005 * noise return data_noise 123def hpss(data): y_harmonic, y_percussive = librosa.effects.hpss(data.astype('float64')) return y_harmonic, y_percussive 12def shift(data): return np.roll(data, 1600) 123456789def stretch(data, rate=1): input_length = len(data) streching = librosa.effects.time_stretch(data, rate) if len(streching) &gt; input_length: streching = streching[:input_length] else: streching = np.pad(streching, (0, max(0, input_length - len(streching))), &quot;constant&quot;) return streching 12345678910def change_pitch_and_speed(data): y_pitch_speed = data.copy() # you can change low and high here length_change = np.random.uniform(low=0.8, high=1) speed_fac = 1.0 / length_change tmp = np.interp(np.arange(0, len(y_pitch_speed), speed_fac), np.arange(0, len(y_pitch_speed)), y_pitch_speed) minlen = min(y_pitch_speed.shape[0], tmp.shape[0]) y_pitch_speed *= 0 y_pitch_speed[0:minlen] = tmp[0:minlen] return y_pitch_speed 1234567data_noise = add_noise(audio_np)data_roll = shift(audio_np)data_stretch = stretch(audio_np)pitch_speed = change_pitch_and_speed(audio_np)value = value_aug(audio_np)y_harmonic, y_percussive = hpss(audio_np)y_shift = shift(audio_np) 1ipd.Audio(data_noise, rate=fs) 12345678import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(magnitude, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() 1234567891011mel_s = librosa.feature.melspectrogram(y=y, sr=sr)print(mel_s.shape)import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(mel_s, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() (128, 96) 1234567891011mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)print(mfccs.shape)import matplotlib.pyplot as pltplt.figure(figsize=(10, 4))librosa.display.specshow(mfccs, x_axis='time')plt.colorbar()plt.title('MFCC')plt.tight_layout()plt.show() (40, 96) 12345678import matplotlib.pyplot as pltlibrosa.display.specshow(librosa.amplitude_to_db(mfccs, ref=np.max), y_axis='log', x_axis='time')plt.title('Power spectrogram')plt.colorbar(format='%+2.0f dB')plt.tight_layout()plt.show() 들리는 소리 = 배경잡음 + 목소리12filename_wav = &quot;./wav/voice.wav&quot;filename_noise = &quot;./wav/cafe_noise.wav&quot; 12import IPython.display as ipdipd.Audio(filename_wav) 12import IPython.display as ipdipd.Audio(filename_noise) 123456789101112data_wav, sr_wav = librosa.load(filename_wav, mono=True, sr=16000)data_noise, sr_noise = librosa.load(filename_noise, mono=True, sr=16000)print(data_wav.shape)print(data_noise.shape)# 전체적으로 들리는 소리는 소리의 합( 배경음 + 목소리 )data_wav_noise = data_wav[:] + data_noise[:len(data_wav)]pos=10print(&quot;wav: {:.8f}, noise {:.8f}, wav+noise: {:.8f}&quot;.format(data_wav[pos], data_noise[pos], data_wav_noise[pos])) (48944,) (1044712,) wav: -0.00009155, noise -0.00003052, wav + noise: -0.00012207 1ipd.Audio(data_wav_noise, rate=16000)","link":"/2020/12/03/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9E%85%EB%AC%B8%ED%95%98%EA%B8%B0-9/"},{"title":"소소한 연구아닌 연구","text":"넘사벽 난이도인 트랜스포머 모델링 시계열 데이터를 병렬 처리한다는 점에서는 가장 좋지만 그만큼 모델링 하기가 까다롭다. model input : (Batch, Sequence, feature_num) Transformer는 input / output을 잘못 설계하다간 sequence 정보가 날아갈 수도 있고 그냥 데이터 자체가 8:45 가 될수가 있다. 입력 데이터를 Seqneuce로 Packing 해주어야 학습이 가능한 데이터가 된다. Sequence Packing 방법은 파이썬 문법으로 비교적 쉽게 되지만… 12345df_train = train.valuestrain_seq = []for i in range(seq_len, len(df_train)+1): train_seq.append(df_train[i - seq_len: i])train_seq = np.array(train_seq) Sequence unpacking 은 numpy 연산을 써야 비교적 쉬움.. 12out = np.vstack(r for r in train_seq)out = out.unique(out, axis=0) 다변량 회귀에서 얻은 교훈 1 입력 데이터를 받아서 Time Embedding… 시간별 Positional Encoding 방법을 소개하지. y = wx + b concat sin(wx+b) 선형의 시간 특징과 주기성의 특징에다 sin을 적용한 특징임. 12345678910111213141516171819202122232425262728293031323334353637class Time2Vector(Layer): def __init__(self, seq_len, **kwargs): super(Time2Vector, self).__init__() self.seq_len = seq_len def build(self, input_shape): '''shape (batch, seq_len) 형태로 가중치와 Bias 초기화 ''' self.weights_linear = self.add_weight(name='weight_linear', shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.bias_linear = self.add_weight(name='bias_linear', shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.weights_periodic = self.add_weight(name='weight_periodic', shape=(int(self.seq_len),), initializer='uniform', trainable=True) self.bias_periodic = self.add_weight(name='bias_periodic', shape=(int(self.seq_len),), initializer='uniform', trainable=True) def call(self, x): '''주기성, 선형 시간별 특징을 계산''' x = tf.math.reduce_mean(x[:,:,:], axis=-1) # 입력 Feature 차원 슬라이싱 time_linear = self.weights_linear * x + self.bias_linear # 선형 시간 특징 time_linear = tf.expand_dims(time_linear, axis=-1) # 차원 추가 (batch, seq_len, 1) time_periodic = tf.math.sin(tf.multiply(x, self.weights_periodic) + self.bias_periodic) time_periodic = tf.expand_dims(time_periodic, axis=-1) # 차원 추가 (batch, seq_len, 1) return tf.concat([time_linear, time_periodic], axis=-1) # shape = (batch, seq_len, 2) 트랜스포머의 특징 시계열 데이터 분류, 회귀 문제에서는 Decoder가 빠져있는 Self Attention을 사용한다. (Fine Tunning) Decoder는 챗봇이나 Auto-Encoder같은 Encoder-Decoder 구조에 사용되는 경향이 있다. 참고 논문 : https://openreview.net/forum?id=lE1AB4stmX 논문에서는 n_layer_num, padding_mask 를 쓰는 특징이 있다. 이 파라미터까지 쓸 수 있으면 좋겠지만 GPU 메모리가 8기가밖에 안되서 논문 파라미터보다는 작게 설정을 해야 원활이 가능하다. 그리고 dataset을 window 하면 GPU RAM 사용량을 더 낮출 수 있다.","link":"/2021/01/03/%EC%86%8C%EC%86%8C%ED%95%9C-%EC%97%B0%EA%B5%AC%EC%95%84%EB%8B%8C-%EC%97%B0%EA%B5%AC/"},{"title":"인공지능 경진대회 후기","text":"인공지능 문제해결 경진대회 참가후기 2020, 2021 🔔 정말 치열했던 경진대회였다. 처음에는 이미지 멀티라벨 다중 분류 문제가 나왔었고 그 이후 본선대회에서는 NLP, OCR, GAN 등 여러 도메인 문제가 출현했었다 베이스라인 코드 그런건 사실상 없ㅋ음ㅋ..🔐 그냥 데이터를 말 그대로 해체 분석을 했어야 했다. 아무리 Data Clensing을 해도 그대로인 loss와 score… 8:45🕛 결국 아예 리모델링, 데이터 Cleanize 한 뒤에 학습을 다시 돌렸다. 천신만고 끝에… 참고로 팀명은 풍선띄우기 ;; 명단에 발표되기까지 엄청난 긴장감이…🌡📈","link":"/2020/12/09/%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EA%B2%BD%EC%A7%84%EB%8C%80%ED%9A%8C-%ED%9B%84%EA%B8%B0/"},{"title":"참고리스트","text":"텐서플로우 개발에 참고할 만한 문서들(References)Tensorflow Tutorial 텐서플로우 튜토리얼 시계열데이터 스터디자료 모음(Transformer) 참고논문1 둘러볼만한 깃헙 둘러볼만한 깃헙2 깃헙 링크2 음성 자연어처리 스터디자료 모음 TacoTron Tensorflow 오디오 딥러닝 참고자료 best VGGish kaggle Dataset 계속 업데이트 예정 입니다.","link":"/2020/12/06/%EC%B0%B8%EA%B3%A0%EB%A6%AC%EC%8A%A4%ED%8A%B8/"},{"title":"치열한-데이콘후기","text":"데이콘 최근 대회 후기 - 데이콘 어나더 버전 흥미롭지만 quantile loss… 복잡하지만 풀이법은 있다. 그냥 quantile 별로 돌리지 말고 1.0에 대한 값을 예측한 뒤 0.5 ~ 1.0 범위로 하면 끝;; loss function 수식구현은 쉽지만 loss를 줄이는 방법이 관건이다. 진짜 4.1에서 줄어들지 않는 loss… 과연 어떻게 하면 줄일수 있을까… 다변량 회귀 왜 이렇게 어려울까요? - 데이콘 대회에서 얻은 엄청난 교훈 loss 계산할때 다른 target 값과 x_train값이 아닌 다른 Element 끼리 계산되어서 오히려 loss가 폭증하기도 한다 이렇게 하면 8:45 된다. Wandb로 시각화 안했으면 큰일났었을듯 싶었다. Loss 시각화 툴로 보니 초반에서 수렴하지 않는 문제나 아예 u자로 불규칙적으로 튀는 현상도 발생…. 분명 window dataset으로 부하분산을 하면 데이터 처리가 수월할 것 같지만…이렇게 되면 끗;;; 채점을 해보니 극악의 Loss가 나오기도 한다. 에측 label과 train test의 shape을 확인 또 확인.. 떄에는 window_size, buffer size를 잘 조절해야 한다. window_size를 너무 낮추면 자칫하면 GPU 사용률은 한자리에 머물고 시간은 오래 걸린다. 하지만 GPU RAM 사용량은 줄어드는 이점은 있다. window dataset을 하다보면 배치 크기가 안 맞아서 예측이 안될때가 있는데 이럴땐… Shuffle Buffer size 조절은 필수, batch Size에 주의하여 조절한다. 그렇지 않으면(BATCH SIZE가 굉장히 높다면) 1WARNING:tensorflow:5 out of the last 5 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7f2570221d30&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details. 이런 경고가 나온다.. -&gt; batch size를 반드시 조절하거나 batch padding…","link":"/2021/01/02/%EC%B9%98%EC%97%B4%ED%95%9C-%EB%8D%B0%EC%9D%B4%EC%BD%98%ED%9B%84%EA%B8%B0/"},{"title":"코딩 국룰","text":"코딩 국룰 C++, C#, java에서는 getter, setter Python에서는 변수를 더블 언더스코어(__)로 접근함. Getter, Setter? Getter : 해당 함수를 통해서 값을 얻는 함수 Setter : 해당 함수를 통해서 값을 설정하는 함수 만약 모든 변수들을 public으로 한다면?? 특히 파이썬에서는 자주 있는 일이다. 정말 대환장 페스티벌이다. 어디서 꼬였는지 찾기도 힘들다. 다른 함수에서 주요 변수를 조작하기 때문이다. 쉽게 말하면 은행에 있는 돈은 인가자만 취급가능하다. 입출금도 정해진 방법(함수)로만 핸들링 되어야 한다. 은행에서 돈을 인출할 때는 Getter로 꺼내고 Setter로 돈을 맡기는 원리이다. private 변수를 함수를 통해 조작해야 할 일이 있는데 그것이 Getter, Setter이다. Getter 예제 (C#) 123456private Level;public int GetLevel(){ return Level;} Setter 예제 123public void SetLevel(int Level){ this.Level = Level}","link":"/2021/02/01/%EC%BD%94%EB%94%A9-%EA%B5%AD%EB%A3%B0/"}],"tags":[{"name":"Dacon","slug":"Dacon","link":"/tags/Dacon/"},{"name":"Try","slug":"Try","link":"/tags/Try/"},{"name":"HEXO","slug":"HEXO","link":"/tags/HEXO/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"ML","slug":"ML","link":"/tags/ML/"},{"name":"DL","slug":"DL","link":"/tags/DL/"},{"name":"GAN","slug":"GAN","link":"/tags/GAN/"},{"name":"Tensorflow2","slug":"Tensorflow2","link":"/tags/Tensorflow2/"},{"name":"TF2","slug":"TF2","link":"/tags/TF2/"},{"name":"Music EDA","slug":"Music-EDA","link":"/tags/Music-EDA/"},{"name":"Script","slug":"Script","link":"/tags/Script/"},{"name":"coding","slug":"coding","link":"/tags/coding/"},{"name":"XR","slug":"XR","link":"/tags/XR/"},{"name":"Unity","slug":"Unity","link":"/tags/Unity/"},{"name":"unity","slug":"unity","link":"/tags/unity/"},{"name":"Linear Algebra","slug":"Linear-Algebra","link":"/tags/Linear-Algebra/"},{"name":"Audio","slug":"Audio","link":"/tags/Audio/"},{"name":"Dev","slug":"Dev","link":"/tags/Dev/"},{"name":"competition","slug":"competition","link":"/tags/competition/"},{"name":"Paper","slug":"Paper","link":"/tags/Paper/"},{"name":"rules","slug":"rules","link":"/tags/rules/"}],"categories":[{"name":"Study","slug":"Study","link":"/categories/Study/"},{"name":"GitPage","slug":"GitPage","link":"/categories/GitPage/"},{"name":"Dacon","slug":"Study/Dacon","link":"/categories/Study/Dacon/"},{"name":"Hexo","slug":"GitPage/Hexo","link":"/categories/GitPage/Hexo/"},{"name":"Kaggle, Dacon","slug":"Study/Kaggle-Dacon","link":"/categories/Study/Kaggle-Dacon/"},{"name":"ilsang","slug":"ilsang","link":"/categories/ilsang/"},{"name":"Deep Learning","slug":"Study/Deep-Learning","link":"/categories/Study/Deep-Learning/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Competition","slug":"Competition","link":"/categories/Competition/"},{"name":"Papers","slug":"Study/Papers","link":"/categories/Study/Papers/"}]}